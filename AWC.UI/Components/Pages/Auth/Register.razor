@page "/auth/officer-registeration"
@using System.Security.Cryptography
@using AWC.CQRS.Commands.User
@using Microsoft.AspNetCore.Mvc.Rendering
@inject IMediator Mediator

@rendermode InteractiveServer


@layout EmptyLayout

    <link rel="stylesheet" href="assets/bootstrap/css/bootstrap.min.css">

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

    <style>
        body {
            background: #f0f0f0;
            display: flex;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
            padding: 20px;
        }

        .register-container {
            background: #fff;
            padding: 30px 40px;
            border-radius: 10px;
            box-shadow: 0 0 25px rgba(0, 0, 0, 0.1);
            max-width: 650px;
            width: 100%;
        }

        h3 {
            text-align: center;
            margin-bottom: 30px;
            font-weight: bold;
            font-size: 24px;
        }

        .form-group {
            position: relative;
            margin-bottom: 20px;
        }

            .form-group i {
                position: absolute;
                top: 12px;
                left: 12px;
                color: #999;
                font-size: 16px;
            }

        .form-control {
            padding-left: 38px;
            height: 45px;
            font-size: 15px;
        }

        label {
            font-size: 14px;
            font-weight: 500;
        }

        .btn {
            font-size: 16px;
            padding: 12px 20px;
        }

        .back-link {
            display: inline-block;
            margin-top: 20px;
            color: #337ab7;
            font-size: 14px;
        }

            .back-link i {
                margin-right: 5px;
            }

            .back-link:hover {
                text-decoration: underline;
            }

    .logo-inline {
        background: transparent;
        text-decoration: none;
        padding: 0;
    }

        .logo-inline img {
            height: 35px;
            width: auto;
            border-radius: 50%;
        }

        .logo-inline span {
            font-weight: 600;
            font-size: 16px;
            color: #333;
            letter-spacing: 0.5px;
        }

    .auth-toggle-wrapper {
        display: flex;
        justify-content: center;
        margin-bottom: 20px;
    }

    .auth-toggle-switch {
        display: flex;
        gap: 20px;
        width: 100%;
        background-color: rgba(0, 123, 255, 0.1); /* Soft primary look */
        backdrop-filter: blur(8px);
        padding: 10px 20px;
        border-radius: 8px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
    }

        .auth-toggle-switch a {
            flex: 1;
            text-align: center;
            font-size: 15px;
            font-weight: 600;
            color: #0d6efd; /* Bootstrap primary */
            text-decoration: none;
            padding: 8px 14px;
            border-radius: 6px;
            transition: all 0.3s ease;
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 6px;
        }

            .auth-toggle-switch a.active {
                background-color: #0d6efd;
                color: #fff;
                box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
            }

            .auth-toggle-switch a:hover:not(.active) {
                background-color: rgba(13, 110, 253, 0.1);
                color: #0d6efd;
            }

    </style>

<div class="register-container">

    <!-- Logo + Toggle -->
    <div class="text-center logo-section mb-4">
        <a href="/" class="logo-inline d-inline-flex align-items-center justify-content-center">
            <img src="/assets/images/logo.png" alt="Logo" />
            <span class="ms-2 text-uppercase">Army War College, Mhow</span>
        </a>
    </div>

    <div class="auth-toggle-wrapper mb-4">
        <div class="auth-toggle-switch w-100 justify-content-center">
            <a class="@(IsLoginActive ? "active" : "")" href="/auth/login">
                <i class="fa fa-sign-in"></i> Login
            </a>
            <a class="@(IsLoginActive ? "" : "active")" href="/auth/officer-registeration">
                <i class="fa fa-user-plus"></i> Officer Registration
            </a>
        </div>
    </div>

    <h3><i class="fa fa-user-plus"></i> Army War College: Officer Registration</h3>

    <!-- Actual Form -->
    <EditForm Model="_register" OnValidSubmit="SubmitAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="row">
            <div class="col-sm-6 form-group has-feedback">
                <i class="fa fa-id-card form-control-feedback"></i>
                <InputText class="form-control" placeholder="IC Number" @bind-Value="_register.ICnumber" required />
            </div>
            <div class="col-sm-6 form-group has-feedback">
                <i class="fa fa-lock form-control-feedback"></i>
                <InputText type="password" class="form-control" placeholder="Password" @bind-Value="_register.Password" required />
            </div>
        </div>

        <div class="row">
            <div class="col-sm-6 form-group has-feedback">
                <i class="fa fa-user form-control-feedback"></i>
                <InputText class="form-control" placeholder="First Name" @bind-Value="_register.FirstName" required />
            </div>
            <div class="col-sm-6 form-group has-feedback">
                <i class="fa fa-user form-control-feedback"></i>
                <InputText class="form-control" placeholder="Last Name" @bind-Value="_register.LastName" required />
            </div>
        </div>

        <div class="row">
            <div class="col-sm-6 form-group has-feedback">
                <i class="fa fa-envelope form-control-feedback"></i>
                <InputText type="email" class="form-control" placeholder="Email" @bind-Value="_register.Email" required />
            </div>
            <div class="col-sm-6 form-group has-feedback">
                <i class="fa fa-phone form-control-feedback"></i>
                <InputText class="form-control" placeholder="Phone Number" @bind-Value="_register.PhoneNumber" required />
            </div>
        </div>

        <div class="row">
            <div class="col-sm-6 form-group has-feedback">
                <i class="fa fa-map-marker form-control-feedback"></i>
                <InputText class="form-control" placeholder="City" @bind-Value="_register.City" required />
            </div>
            <div class="col-sm-6 form-group has-feedback">
                <i class="fa fa-venus-mars form-control-feedback"></i>
                <InputSelect class="form-control" @bind-Value="_register.Gender">
                    <option value="">Select Gender</option>
                    <option>Male</option>
                    <option>Female</option>
                    <option>Other</option>
                </InputSelect>
            </div>
        </div>

        <button type="submit" disabled="@_inAction" class="btn btn-primary w-100 mt-3 mb-3">
            @if (_inAction)
            {
                <span class="spinner-border spinner-border-sm ms-1" role="status" aria-hidden="true"></span>
            }
            <span>Register</span>
        </button>

        <a href="/auth/login" class="back-link"><i class="fa fa-arrow-left"></i> Back to Login</a>
    </EditForm>

    <DismissibleAlert @ref="_alert" class="shadow-sm" />
</div>

@code {
    private bool IsLoginActive => false;

    private RegisterModel _register = new();
    private bool _inAction;
    private DismissibleAlert? _alert;

    private async Task SubmitAsync()
    {
        if (_inAction) return;

        _inAction = true;
        try
        {
            using var hmac = new HMACSHA512();

            var command = new UpsertCommand
            {
                Id = Guid.NewGuid(), // ✅ Required for insert
                ICnumber = _register.ICnumber,
                PasswordHash = hmac.ComputeHash(Encoding.UTF8.GetBytes(_register.Password)),
                PasswordSalt = hmac.Key,
                FirstName = _register.FirstName,
                LastName = _register.LastName,
                Email = _register.Email,
                PhoneNumber = _register.PhoneNumber,
                Country = _register.Country,
                City = _register.City,
                Gender = _register.Gender,
                Permissions = UserPermissionsEnum.WaitingApproval,

                CreatedBy = Guid.NewGuid(), // ✅ or from logged-in user
                UpdatedBy = Guid.NewGuid()  // ✅ or from logged-in user
            };

            var result = await Mediator.Send(command);
            var (type, msg) = UserCommandResult.GetMessage(result.Result);
            _alert?.ShowAlert(type, msg);
        }
        catch (Exception)
        {
            _alert?.ShowError("An error occurred. Possibly a duplicate entry.");
        }

        _inAction = false;
    }
}