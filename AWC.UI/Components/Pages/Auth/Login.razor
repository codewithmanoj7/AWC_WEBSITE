@page "/auth/login"
@using AWC.UI.Services
@layout EmptyLayout

@rendermode InteractiveServer
@inject IAuthenticationStateService AuthService
@inject IJSRuntime JsRuntime
@inject INavigationService NavigationService

<link rel="stylesheet" href="assets/css/auth.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" />

<style>
    body {
        background: #f5f5f5;
        min-height: 100vh;
        padding: 40px 20px;
        display: block;
    }

    .login-container {
        background: #fff;
        padding: 40px;
        border-radius: 12px;
        box-shadow: 0 0 25px rgba(0, 0, 0, 0.15);
        max-width: 600px;
        width: 100%;
        margin: 60px auto; /* This will center it nicely */
    }


    .form-group i {
        position: absolute;
        top: 12px;
        left: 12px;
        color: #999;
        font-size: 18px;
    }

    .form-control {
        padding-left: 40px;
        height: 50px;
        font-size: 16px;
    }

    label {
        font-size: 16px;
        margin-bottom: 6px;
    }

    .btn {
        font-size: 18px;
        padding: 12px;
    }

    .bottom-links {
        text-align: left;
        margin-top: 30px;
        display: flex;
        flex-wrap: wrap;
        gap: 10px 20px;
    }

    .bottom-links a {
        color: #337ab7;
        font-size: 16px;
        text-decoration: none;
        white-space: nowrap;
    }

    .bottom-links a i {
        margin-right: 5px;
    }

    .bottom-links a:hover {
        text-decoration: underline;
    }

    .form-group.has-feedback {
        position: relative;
    }

    .spinner-border-sm {
        margin-left: 10px;
    }

    .logo-toggle-wrapper {
        flex-wrap: wrap;
        justify-content: center;
        gap: 20px;
        margin-bottom: 30px;
    }

    .logo-section {
        margin-bottom: 20px;
    }

    .logo-inline {
        background: transparent;
        text-decoration: none;
        padding: 0;
    }

        .logo-inline img {
            height: 35px;
            width: auto;
            border-radius: 50%;
        }

        .logo-inline span {
            font-weight: 600;
            font-size: 16px;
            color: #333;
            letter-spacing: 0.5px;
        }

    .auth-toggle-wrapper {
        display: flex;
        justify-content: center;
        margin-bottom: 20px;
    }

    .auth-toggle-switch {
        display: flex;
        gap: 20px;
        width: 100%;
        background-color: rgba(0, 123, 255, 0.1); /* Soft primary look */
        backdrop-filter: blur(8px);
        padding: 10px 20px;
        border-radius: 8px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
    }

        .auth-toggle-switch a {
            flex: 1;
            text-align: center;
            font-size: 15px;
            font-weight: 600;
            color: #0d6efd; /* Bootstrap primary */
            text-decoration: none;
            padding: 8px 14px;
            border-radius: 6px;
            transition: all 0.3s ease;
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 6px;
        }

            .auth-toggle-switch a.active {
                background-color: #0d6efd;
                color: #fff;
                box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
            }

            .auth-toggle-switch a:hover:not(.active) {
                background-color: rgba(13, 110, 253, 0.1);
                color: #0d6efd;
            }


</style>

<div class="login-container">

    <div class="text-center logo-section mb-4">
        <a href="/" class="logo-inline d-inline-flex align-items-center justify-content-center">
            <img src="/assets/images/logo.png" alt="Logo" />
            <span class="ms-2 text-uppercase">Army War College, Mhow</span>
        </a>
    </div>

    <div class="auth-toggle-wrapper mb-4">
        <div class="auth-toggle-switch w-100 justify-content-center">
            <a class="@(IsLoginActive ? "active" : "")" href="/auth/login">
                <i class="fa fa-sign-in"></i> Login
            </a>
            <a class="@(IsLoginActive ? "" : "active")" href="/auth/officer-registeration">
                <i class="fa fa-user-plus"></i> Officer Registration
            </a>
        </div>
    </div>

    <h3 class="text-center" style="margin-bottom:30px;"><i class="fa fa-user"></i> Student/Officer Login</h3>

    <EditForm Context="_" OnValidSubmit="@SubmitAsync" Model="_login">
        <DataAnnotationsValidator />

        <div class="form-group has-feedback">
            <i class="fa fa-id-card form-control-feedback"></i>
            <input type="text"
                   class="form-control"
                   placeholder="IC Number"
                   @bind="@_login.ICnumber"
                   pattern="^[A-Za-z]{2}\d{5}[A-Za-z]{1}$"
                   title="Enter a valid code (e.g., IC12345A)."
                   minlength="5"
                   maxlength="30"
                   required />
        </div>

        <div class="form-group has-feedback">
            <i class="fa fa-lock form-control-feedback"></i>
            <input type="password"
                   class="form-control"
                   placeholder="Password"
                   @bind="_login.Password"
                   minlength="8"
                   maxlength="30"
                   required />
        </div>

        <div class="form-check mb-3">
            <label class="form-check-label" for="rememberInput">Remember Me?</label>
            <input type="checkbox"
                   class="form-check-input float-end ms-2"
                   @bind="_login.RememberUser"
                   id="rememberInput" />
        </div>

        <button type="submit" disabled="@_inAction" class="btn btn-primary btn-block w-100">
            @if (_inAction)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            }
            <span>Login</span>
        </button>
    </EditForm>

    <DismissibleAlert @ref="_alert" class="shadow-sm" />

@*     <div class="register-link text-left mt-4" style="font-size: 16px;margin-top:10px;">
        <i class="fa fa-user-plus text-primary"></i>
        <span class="ms-2">Don't have an account?</span>
        <a href="/auth/student-register" class="ms-2 fw-bold text-primary">Register here as Student</a>
    </div> *@
@* 
    <div class="register-link text-left mt-2" style="font-size: 16px;">
        <i class="fa fa-globe text-success"></i>
        <span class="ms-2">International Officer?</span>
        <a href="/officer-login" class="ms-2 fw-bold text-success">Click here to login</a>
    </div> *@

    <div class="bottom-links mt-4">
        <a href="/about-course"><i class="fa fa-info-circle"></i> About Course</a>
        <a href="/course-instructions"><i class="fa fa-file-text"></i> Joining Instructions</a>
        <a href="/course-material"><i class="fa fa-book"></i> Reading Material</a>
    </div>
</div>

@code {
    private DismissibleAlert? _alert;
    private LoginModel _login = new();
    private bool _inAction;

    private bool IsLoginActive => true;

    // Add this injection
    [Inject] private AuthenticationStateProvider AuthStateProvider { get; set; } = default!;

    private async Task SubmitAsync()
    {
        if (!_inAction)
        {
            _inAction = true;
            try
            {
                if (string.IsNullOrEmpty(_login.ICnumber) || string.IsNullOrEmpty(_login.Password))
                {
                    _alert?.ShowError("Please fill out all fields");
                    _inAction = false;
                    return;
                }

                CookieModel cookie = await AuthService.CreateJwtSessionToken(_login.ICnumber, _login.Password, _login.RememberUser);
                await JsRuntime.WriteCookie(CookiesConst.AccessCookie, cookie.Token, cookie.ExpireAt);

                // ✅ Notify authentication state provider
                if (AuthStateProvider is CustomAuthenticationStateProvider customProvider)
                {
                    customProvider.NotifyUserAuthentication();
                }

                // ✅ Redirect to secure page
                NavigationService.NavigateTo("/home", forceLoad: true);
            }
            catch (UnapprovedUserException)
            {
                _alert?.ShowWarning("The user has not yet been approved by the college administration");
                _inAction = false;
            }
            catch (InvalidCredentialsException)
            {
                _alert?.ShowError("The username or password is incorrect");
                _inAction = false;
            }
        }
    }
}