@page "/site/carousel/create"
@page "/site/carousel/{Id:guid}/edit"

@using AWC.CQRS.Commands.Carousel
@using AWC.CQRS.Queries.Carousel
@using AWC.Infra.Entities.Site

@inject IAuthenticationStateService AuthenticationState
@inject INavigationService NavigationService
@inject IMediator Mediator
@inject IPermissionStylingService PermissionStyling
@inject IFileUploadService FileUpload
@layout AuthorizedLayout
@rendermode InteractiveServer
<PageTitle>@(IsEdit ? "Edit Carousel" : "Create Carousel")</PageTitle>

<RenderPermission Permissions="new[] { UserPermissionsEnum.Administrator }"
                  RedirectIfInvalid="true">
    <div class="container" style="margin-bottom:30px;">

        <!-- Header -->
        <div class="panel @PermissionStyling.GetBootstrapClassesForPermission(AuthenticationState?.User?.Permissions)" style="border:none; box-shadow:0 2px 8px rgba(0,0,0,0.1);">
            <div class="panel-body">
                <div class="row">
                    <div class="col-sm-8">
                        <h2 class="no-margin">
                            <i class="fa @(IsEdit ? "fa-edit" : "fa-plus-circle")" style="margin-right:8px;"></i>
                            @(IsEdit ? "Edit Carousel Article" : "Create Carousel Article")
                        </h2>
                    </div>
                    <div class="col-sm-4 text-right">
                        <button class="btn btn-default"
                                @onclick="@(() => NavigationService.NavigateTo($"/site/carousel"))">
                            <i class="fa fa-arrow-left" style="margin-right:5px;"></i> Back to Carousel
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Main Form Panel -->
        <div class="panel panel-default" style="border:none; box-shadow:0 2px 4px rgba(0,0,0,0.05);">
            <div class="panel-body">
                <EditForm Context="_" OnValidSubmit="@OnSubmitAsync" Model="_entity" FormName="CarouselForm">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="alert alert-danger" />

                    <div class="row">
                        <!-- Content Column -->
                        <div class="col-lg-8">
                            <div class="panel panel-default">
                                <div class="panel-heading">
                                    <h5 class="no-margin">
                                        <i class="fa fa-newspaper-o text-primary" style="margin-right:8px;"></i>
                                        Carousel Content
                                    </h5>
                                </div>
                                <div class="panel-body">
                                    <div class="form-group">
                                        <label for="DescriptionInput"><strong>Content *</strong></label>
                                        <InputTextArea class="form-control" @bind-Value="_entity.Description"
                                                       id="DescriptionInput" rows="8"
                                                       placeholder="Write your carousel content here..."
                                                       required />
                                        <p class="help-block">Detailed content of the carousel article</p>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Media & Settings Column -->
                        <div class="col-lg-4">
                            <div class="panel panel-default">
                                <div class="panel-heading">
                                    <h5 class="no-margin">
                                        <i class="fa fa-image text-primary" style="margin-right:8px;"></i>
                                        Featured Image
                                    </h5>
                                </div>
                                <div class="panel-body">
                                    <div class="form-group">
                                        <label for="ImageInput"><strong>Upload Image</strong></label>
                                        <InputFile id="ImageInput" class="form-control" OnChange="HandleImageSelected" accept="image/*" />
                                        <ValidationMessage For="@(() => _imageFile)" />

                                        @if (!string.IsNullOrEmpty(_entity.Image))
                                        {
                                            <div class="text-center" style="margin-top:15px;">
                                                <img src="@_entity.Image" alt="Current Carousel image"
                                                     class="img-responsive img-rounded" style="max-height:200px; margin:0 auto;" />
                                                <div style="margin-top:10px;">
                                                    <button type="button" class="btn btn-xs btn-danger"
                                                            @onclick="() => _entity.Image = null">
                                                        <i class="fa fa-trash" style="margin-right:5px;"></i> Remove Image
                                                    </button>
                                                </div>
                                            </div>
                                        }

                                        <p class="help-block">Recommended size: 1200Ã—630 pixels (max 2MB)</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Form Actions -->
                    <div class="row" style="margin-top:20px;">
                        <div class="col-xs-6">
                            <button type="button" class="btn btn-default"
                                    @onclick="@(() => NavigationService.NavigateTo($"/site/carousel"))">
                                <i class="fa fa-times" style="margin-right:5px;"></i> Cancel
                            </button>
                        </div>
                        <div class="col-xs-6 text-right">
                            <button type="submit" disabled="@_inAction"
                                    class="btn @PermissionStyling.GetBootstrapClassesForPermission(AuthenticationState?.User?.Permissions)">
                                @if (_inAction)
                                {
                                    <span class="fa fa-spinner fa-spin" style="margin-right:5px;"></span>
                                }
                                else
                                {
                                    <i class="fa @(IsEdit ? "fa-save" : "fa-plus-circle")" style="margin-right:5px;"></i>
                                }
                                @(IsEdit ? "Update Carousel" : "Publish Carousel")
                            </button>
                        </div>
                    </div>
                </EditForm>

                <!-- Status Alert -->
                <div style="margin-top:15px;">
                    <DismissibleAlert @ref="_alert" />
                </div>
            </div>
        </div>
    </div>
</RenderPermission>

<style>
    .no-margin {
        margin: 0;
    }

    .panel-heading {
        background-color: #f7f7f7 !important;
        border-bottom: 1px solid #ddd;
        padding: 10px 15px;
    }

    .help-block {
        margin-top: 5px;
        font-size: 12px;
        color: #777;
    }
</style>


@code {
    [Parameter] public Guid Id { get; set; }
    private bool IsEdit => Id != Guid.Empty;

    private CarouselEntity _entity = new();
    private DismissibleAlert? _alert;
    private bool _inAction;
    private IBrowserFile? _imageFile;

    protected override async Task OnInitializedAsync()
    {
        if (IsEdit)
        {
            var result = await Mediator.Send(new GetByIdQuery { Id = Id });
            _entity = result;
        }
    }

    private async Task HandleImageSelected(InputFileChangeEventArgs e)
    {
        _imageFile = e.File;

        if (!_imageFile.ContentType.StartsWith("image/", StringComparison.OrdinalIgnoreCase))
        {
            _alert?.ShowError("Please upload a valid image file.");
            _imageFile = null;
            return;
        }

        if (_imageFile.Size > 2 * 1024 * 1024)
        {
            _alert?.ShowError("Image size exceeds the 2MB limit.");
            _imageFile = null;
            return;
        }

        // Load image as preview using base64
        try
        {
            using var stream = _imageFile.OpenReadStream(maxAllowedSize: 2 * 1024 * 1024);
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            var base64 = Convert.ToBase64String(ms.ToArray());
            _entity.Image = $"data:{_imageFile.ContentType};base64,{base64}";
        }
        catch (Exception ex)
        {
            _alert?.ShowError($"Error loading image: {ex.Message}");
        }
    }

    private async Task OnSubmitAsync()
    {
        if (!_inAction)
        {
            try
            {
                _inAction = true;
                var imagePath = _entity.Image;

                if (_imageFile != null)
                {
                    var allowedExtensions = new[] { ".jpg", ".jpeg", ".png", ".gif", ".webp" };
                    var uploadResult = await FileUpload.UploadFileAsync(
                        _imageFile,
                        UploadPath.CarouselImages,
                        allowedExtensions);

                    if (uploadResult.Success)
                    {
                        imagePath = uploadResult.FilePath ?? string.Empty;
                    }
                    else
                    {
                        _alert?.ShowError(uploadResult.Message);
                        return;
                    }
                }

                var command = new UpsertCommand
                {
                    Id = IsEdit ? Id : Guid.Empty,
                    Name = _entity.Name,
                    Description = _entity.Description,
                    Image = imagePath,
                    CreatedBy = IsEdit ? null : AuthenticationState.User?.Id,
                    UpdatedBy = IsEdit ? AuthenticationState.User?.Id : null
                };

                var result = await Mediator.Send(command);
                _alert?.ShowAlert(result.Result == 1 ? "success" : "error",
                    result.Result == 1 ?
                        IsEdit ? "Carousel updated successfully!" : "Carousel published successfully!" :
                        "Failed to save Carousel article.");

                if (result.Result == 1 && !IsEdit)
                {
                    _entity = new();
                    _imageFile = null;
                }
            }
            catch (Exception ex)
            {
                _alert?.ShowError($"An error occurred: {ex.Message}");
            }
            finally
            {
                _inAction = false;
            }
        }
    }
}