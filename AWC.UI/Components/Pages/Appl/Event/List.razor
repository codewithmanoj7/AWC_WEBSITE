@page "/site/events"
@page "/site/events/{PageId:int}"

@using AWC.CQRS.Commands.Event
@using AWC.CQRS.Queries.Event
@using AWC.Infra.Entities.Site

@inject IAuthenticationStateService AuthenticationState
@inject INavigationService NavigationService
@inject IMediator Mediator
@inject ICsvExporterService CsvExporter
@inject IPermissionStylingService PermissionStyling
@layout AuthorizedLayout
@rendermode InteractiveServer

<PageTitle>Events</PageTitle>
<RenderPermission Permissions="new[] { UserPermissionsEnum.Administrator, UserPermissionsEnum.ContentManager }"
                  RedirectIfInvalid="true">
    <div class="container events-management-container">

        <!-- Header Section -->
        <div class="page-header-wrapper">
            <div class="row">
                <div class="col-md-6">
                    <div class="page-title">
                        <div class="title-icon">
                            <i class="fa fa-calendar fa-2x"></i>
                        </div>
                        <div class="title-content">
                            <h2 class="title-main">Events Management</h2>
                            <p class="title-subtitle">Organize and manage your events efficiently</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-6 text-right">
                    <div class="header-actions">
                        <button class="btn btn-info btn-export" @onclick="ExportToCsv">
                            <i class="fa fa-download"></i>
                            <span>Export CSV</span>
                        </button>
                        <button class="btn btn-primary btn-add" @onclick="@(() => NavigationService.NavigateTo($"/site/events/create"))">
                            <i class="fa fa-plus-circle"></i>
                            <span>Add New Event</span>
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Search & Filters Card -->
        <div class="search-filters-card">
            <div class="card-content">
                <div class="row">
                    <div class="col-md-8">
                        <div class="search-wrapper">
                            <div class="search-icon">
                                <i class="fa fa-search"></i>
                            </div>
                            <input type="text" class="form-control search-input"
                                   placeholder="Search events by name, location, or description..."
                                   @bind="_searchTerm" @oninput="OnSearchInputChanged" />
                        </div>
                    </div>

                    <div class="col-md-4 text-right">
                        <div class="dropdown filter-dropdown">
                            <button class="btn btn-default dropdown-toggle filter-btn"
                                    type="button" data-toggle="dropdown" aria-expanded="false">
                                <i class="fa fa-filter"></i> <span>Filters</span>
                                <span class="caret"></span>
                            </button>

                            <ul class="dropdown-menu dropdown-menu-right filter-menu">
                                <li class="filter-header">
                                    <i class="fa fa-calendar"></i>
                                    <span>Filter by Creation Date</span>
                                </li>
                                <li class="filter-item">
                                    <label class="filter-label">
                                        <i class="fa fa-calendar-plus-o"></i> Created From
                                    </label>
                                    <input type="date" class="form-control date-input"
                                           value="@(_createdFrom?.ToString("yyyy-MM-dd") ?? "")"
                                           @onchange="@(e => SetCreatedFrom(e))" />
                                </li>
                                <li class="filter-item">
                                    <label class="filter-label">
                                        <i class="fa fa-calendar-minus-o"></i> Created To
                                    </label>
                                    <input type="date" class="form-control date-input"
                                           value="@(_createdTo?.ToString("yyyy-MM-dd") ?? "")"
                                           @onchange="@(e => SetCreatedTo(e))" />
                                </li>
                                <li class="divider"></li>
                                <li class="filter-actions text-center">
                                    <button type="button" class="btn btn-danger btn-sm"
                                            @onclick="ClearDateFilters">
                                        <i class="fa fa-times-circle"></i> Clear Filters
                                    </button>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Results Summary -->
        @{
            var numFrom = (PageId - 1) * ItemsPerPage + 1;
            var numTo = (PageId * ItemsPerPage) > _itemCount ? _itemCount : (PageId * ItemsPerPage);
        }
        <div class="results-summary">
            <div class="summary-icon">
                <i class="fa fa-info-circle"></i>
            </div>
            <div class="summary-text">
                Displaying <strong>@numFrom - @numTo</strong> of <strong>@_itemCount</strong> events
            </div>
        </div>

        <!-- Active Filters -->
        @if (_createdFrom.HasValue || _createdTo.HasValue)
        {
            <div class="active-filters">
                <div class="filter-icon">
                    <i class="fa fa-filter"></i>
                </div>
                <div class="filter-text">
                    Filtering events by creation date:
                    @(_createdFrom.HasValue ? $"from {_createdFrom.Value:yyyy-MM-dd}" : "")
                    @(_createdTo.HasValue ? $" to {_createdTo.Value:yyyy-MM-dd}" : "")
                </div>
                <button class="btn btn-sm btn-clear-filter" @onclick="ClearDateFilters">
                    <i class="fa fa-times"></i>
                    Clear
                </button>
            </div>
        }

        <!-- Event Cards Grid -->
        @if (_eventList.Count > 0)
        {
            <div class="events-grid">
                @foreach (var item in _eventList)
                {
                    <div class="event-card-wrapper">
                        <div class="event-card">
                            <!-- Event Header -->
                            <div class="event-header">
                                <div class="event-title">
                                    <h4>@item.Name</h4>
                                </div>
                                <div class="event-date-badge">
                                    <i class="fa fa-calendar-o"></i>
                                    <span>@item.Date.ToString("MMM dd")</span>
                                </div>
                            </div>

                            <!-- Event Body -->
                            <div class="event-body">
                                <div class="event-detail">
                                    <div class="detail-icon location">
                                        <i class="fa fa-map-marker"></i>
                                    </div>
                                    <div class="detail-text">
                                        @(item.Location ?? "Location not specified")
                                    </div>
                                </div>

                                <div class="event-detail">
                                    <div class="detail-icon time">
                                        <i class="fa fa-clock-o"></i>
                                    </div>
                                    <div class="detail-text">
                                        @item.StartTimeString - @item.EndTimeString
                                    </div>
                                </div>

                                @if (item.EndDate.HasValue)
                                {
                                    <div class="event-detail end-date">
                                        <div class="detail-icon">
                                            <i class="fa fa-calendar-check-o"></i>
                                        </div>
                                        <div class="detail-text">
                                            Ends: @item.EndDate.Value.ToString("MMM dd")
                                        </div>
                                    </div>
                                }

                                @if (!string.IsNullOrEmpty(item.Description))
                                {
                                    <div class="event-description">
                                        <p>@item.Description</p>
                                    </div>
                                }
                            </div>

                            <!-- Event Footer -->
                            <div class="event-footer">
                                <div class="event-meta">
                                    <div class="meta-item">
                                        <i class="fa fa-plus-circle"></i>
                                        <span>@item.CreatedAt.ToString("MMM dd, yyyy")</span>
                                    </div>
                                    @if (item.UpdatedAt != item.CreatedAt)
                                    {
                                        <div class="meta-item updated">
                                            <i class="fa fa-edit"></i>
                                            <span>Updated: @item.UpdatedAt.ToString("MMM dd")</span>
                                        </div>
                                    }
                                </div>
                                <div class="event-actions">
                                    <div class="dropdown">
                                        <button class="btn btn-sm btn-actions dropdown-toggle" type="button" data-toggle="dropdown">
                                            <i class="fa fa-ellipsis-v"></i>
                                        </button>
                                        <ul class="dropdown-menu dropdown-menu-right action-menu">
                                            <li>
                                                <a href="@($"/site/events/{item.Id}/edit")" class="action-link edit">
                                                    <i class="fa fa-pencil"></i>
                                                    <span>Edit Event</span>
                                                </a>
                                            </li>
                                            <li class="action-divider"></li>
                                            <li>
                                                <a class="action-link delete" @onclick="() => DeleteEvent(item.Id)">
                                                    <i class="fa fa-trash"></i>
                                                    <span>Delete Event</span>
                                                </a>
                                            </li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="empty-state">
                <div class="empty-icon">
                    <i class="fa fa-calendar-times-o"></i>
                </div>
                <h3 class="empty-title">No events found</h3>
                <p class="empty-subtitle">Try adjusting your search criteria or create your first event</p>
                <button class="btn btn-primary btn-create-first" @onclick="@(() => NavigationService.NavigateTo($"/site/events/create"))">
                    <i class="fa fa-plus"></i>
                    <span>Create First Event</span>
                </button>
            </div>
        }

        <!-- Pagination -->
        @if (_eventList.Count > 0)
        {
            <div class="pagination-wrapper">
                <Pagination @ref="_pagination" UrlPagination="/site/events/"
                            PagesBufferRange="@PagesBufferRange" CurrentPage="PageId"
                            CurrentPagesCount="_pagesCount" />
            </div>
        }
    </div>
</RenderPermission>

<style>

    .events-management-container {
        padding: 30px 15px;
        background: linear-gradient(135deg, #f8f9ff 0%, #e8f2ff 100%);
        min-height: 100vh;
    }

    /* Ensure dropdown isn't cut off by card or wrapper */
    .search-filters-card {
        position: relative;
        overflow: visible !important;
        z-index: 1;
    }

    .card-content {
        overflow: visible !important;
        position: relative;
    }

    /* Dropdown menu styling */
    .filter-dropdown {
        position: relative;
    }

    .filter-menu {
        z-index: 1050 !important;
        min-width: 280px;
        padding: 15px 20px;
        background: #fff;
        border-radius: 8px;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
    }

    .filter-header {
        font-weight: bold;
        color: #333;
        margin-bottom: 10px;
    }

    .filter-item {
        margin-bottom: 15px;
    }

    .filter-label {
        display: block;
        font-size: 13px;
        margin-bottom: 5px;
        color: #555;
    }


    /* Page Header */
    .page-header-wrapper {
        margin-bottom: 30px;
        padding: 0 15px;
    }

    .page-title {
        display: flex;
        align-items: center;
        gap: 20px;
    }

    .title-icon {
        background: linear-gradient(135deg, #007bff, #0056b3);
        color: white;
        width: 70px;
        height: 70px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: 0 4px 15px rgba(0, 123, 255, 0.3);
    }

    .title-content h2.title-main {
        margin: 0;
        color: #2c3e50;
        font-weight: 600;
        font-size: 28px;
    }

    .title-content .title-subtitle {
        margin: 5px 0 0 0;
        color: #6c757d;
        font-size: 16px;
    }

    /* Header Actions */
    .header-actions {
        display: flex;
        gap: 10px;
        align-items: center;
    }


    .btn-export {
        background: linear-gradient(135deg, #17a2b8, #138496);
        border: none;
        color: white;
        border-radius: 25px;
        padding: 10px 20px;
        font-weight: 500;
        transition: all 0.3s ease;
        box-shadow: 0 3px 10px rgba(23, 162, 184, 0.3);
    }

        .btn-export:hover {
            background: linear-gradient(135deg, #138496, #117a8b);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(23, 162, 184, 0.4);
        }

    .btn-add {
        background: linear-gradient(135deg, #007bff, #0056b3);
        border: none;
        color: white;
        border-radius: 25px;
        padding: 10px 20px;
        font-weight: 600;
        transition: all 0.3s ease;
        box-shadow: 0 3px 10px rgba(0, 123, 255, 0.3);
    }

        .btn-add:hover {
            background: linear-gradient(135deg, #0056b3, #004085);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 123, 255, 0.4);
        }

        .btn-export span, .btn-add span {
            margin-left: 5px;
        }

    /* Search & Filters Card */
    .search-filters-card {
        background: white;
        border-radius: 15px;
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
        margin-bottom: 25px;
        overflow: hidden;
    }

    .card-content {
        padding: 25px;
    }

    /* Search Input */
    .search-wrapper {
        position: relative;
    }

    .search-icon {
        position: absolute;
        left: 15px;
        top: 50%;
        transform: translateY(-50%);
        color: #007bff;
        z-index: 2;
    }

    .search-input {
        border: 2px solid #e9ecef;
        border-radius: 25px;
        padding: 12px 15px 12px 45px;
        font-size: 14px;
        transition: all 0.3s ease;
        background: #fdfdfd;
    }

        .search-input:focus {
            border-color: #007bff;
            box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);
            background: white;
            outline: none;
        }

    /* Filter Dropdown */
    .filter-btn {
        background: white;
        border: 2px solid #dee2e6;
        border-radius: 25px;
        padding: 12px 20px;
        font-weight: 500;
        color: #6c757d;
        transition: all 0.3s ease;
    }

        .filter-btn:hover {
            border-color: #007bff;
            color: #007bff;
            background: #f8f9ff;
        }

        .filter-btn span {
            margin: 0 5px;
        }

    .filter-menu {
        background: white;
        border: none;
        border-radius: 12px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
        padding: 20px;
        width: 280px;
        margin-top: 10px;
    }

    .filter-header {
        display: flex;
        align-items: center;
        gap: 10px;
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 15px;
        padding-bottom: 10px;
        border-bottom: 1px solid #e9ecef;
    }

    .filter-item {
        margin-bottom: 15px;
    }

    .filter-label {
        display: flex;
        align-items: center;
        gap: 8px;
        font-weight: 500;
        color: #495057;
        margin-bottom: 5px;
        font-size: 13px;
    }

    .date-input {
        border: 1px solid #dee2e6;
        border-radius: 6px;
        padding: 8px 12px;
        font-size: 13px;
        width: 100%;
    }

        .date-input:focus {
            border-color: #007bff;
            box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.1);
            outline: none;
        }

    .filter-divider {
        border-top: 1px solid #e9ecef;
        margin: 15px -20px;
    }

    .filter-actions {
        text-align: center;
    }

    .clear-filters-btn {
        background: #dc3545;
        border: none;
        color: white;
        border-radius: 15px;
        padding: 8px 15px;
        font-weight: 500;
        transition: all 0.3s ease;
    }

        .clear-filters-btn:hover {
            background: #c82333;
            transform: translateY(-1px);
        }

    /* Results Summary */
    .results-summary {
        background: linear-gradient(135deg, #e3f2fd, #bbdefb);
        border: 1px solid #90caf9;
        border-radius: 10px;
        padding: 15px 20px;
        margin-bottom: 20px;
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .summary-icon {
        color: #1976d2;
        font-size: 18px;
    }

    .summary-text {
        color: #1565c0;
        font-weight: 500;
    }

    /* Active Filters */
    .active-filters {
        background: linear-gradient(135deg, #fff3cd, #ffeaa7);
        border: 1px solid #ffc107;
        border-radius: 10px;
        padding: 15px 20px;
        margin-bottom: 20px;
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .filter-icon {
        color: #856404;
        font-size: 16px;
    }

    .filter-text {
        color: #856404;
        font-weight: 500;
        flex: 1;
    }

    .btn-clear-filter {
        background: #ffc107;
        border: none;
        color: #856404;
        border-radius: 15px;
        padding: 6px 12px;
        font-weight: 500;
        transition: all 0.3s ease;
    }

        .btn-clear-filter:hover {
            background: #e0a800;
            color: white;
        }

    /* Events Grid */
    .events-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        gap: 25px;
        margin-bottom: 40px;
    }

    .event-card-wrapper {
        animation: slideInUp 0.6s ease-out;
    }

    .event-card {
        background: white;
        border-radius: 15px;
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.08);
        overflow: hidden;
        transition: all 0.3s ease;
        height: 100%;
        display: flex;
        flex-direction: column;
    }

        .event-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.15);
        }

    /* Event Header */
    .event-header {
        background: linear-gradient(135deg, #f8f9ff, #e3f2fd);
        padding: 20px;
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        border-bottom: 1px solid #e1f5fe;
    }

    .event-title h4 {
        margin: 0;
        color: #2c3e50;
        font-weight: 600;
        font-size: 18px;
        line-height: 1.3;
    }

    .event-date-badge {
        background: linear-gradient(135deg, #007bff, #0056b3);
        color: white;
        padding: 8px 12px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 5px;
        white-space: nowrap;
        box-shadow: 0 3px 10px rgba(0, 123, 255, 0.3);
    }

    /* Event Body */
    .event-body {
        padding: 20px;
        flex: 1;
    }

    .event-detail {
        display: flex;
        align-items: center;
        gap: 12px;
        margin-bottom: 12px;
    }

    .detail-icon {
        width: 30px;
        height: 30px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 14px;
        color: white;
    }

        .detail-icon.location {
            background: linear-gradient(135deg, #dc3545, #c82333);
        }

        .detail-icon.time {
            background: linear-gradient(135deg, #17a2b8, #138496);
        }

    .detail-text {
        color: #495057;
        font-size: 14px;
        font-weight: 500;
    }

    .event-detail.end-date {
        margin-top: 8px;
        padding-top: 8px;
        border-top: 1px solid #f1f3f4;
    }

        .event-detail.end-date .detail-icon {
            background: linear-gradient(135deg, #28a745, #218838);
        }

        .event-detail.end-date .detail-text {
            color: #6c757d;
            font-size: 13px;
        }

    .event-description {
        margin-top: 15px;
        padding-top: 15px;
        border-top: 1px solid #f1f3f4;
    }

        .event-description p {
            color: #6c757d;
            font-size: 13px;
            line-height: 1.5;
            margin: 0;
        }

    /* Event Footer */
    .event-footer {
        background: #f8f9fa;
        padding: 15px 20px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-top: 1px solid #e9ecef;
    }

    .event-meta {
        display: flex;
        flex-direction: column;
        gap: 4px;
    }

    .meta-item {
        display: flex;
        align-items: center;
        gap: 6px;
        color: #6c757d;
        font-size: 11px;
    }

        .meta-item i {
            width: 12px;
            text-align: center;
        }

        .meta-item.updated {
            color: #28a745;
        }

    /* Event Actions */
    .btn-actions {
        background: transparent;
        border: 1px solid #dee2e6;
        color: #6c757d;
        border-radius: 50%;
        width: 32px;
        height: 32px;
        padding: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.3s ease;
    }

        .btn-actions:hover {
            background: #007bff;
            border-color: #007bff;
            color: white;
        }

    .action-menu {
        background: white;
        border: none;
        border-radius: 8px;
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
        padding: 8px 0;
        margin-top: 5px;
        min-width: 140px;
    }

    .action-link {
        display: flex;
        align-items: center;
        gap: 10px;
        padding: 10px 15px;
        color: #495057;
        text-decoration: none;
        font-size: 13px;
        font-weight: 500;
        transition: all 0.2s ease;
    }

        .action-link:hover {
            background: #f8f9fa;
            text-decoration: none;
        }

        .action-link.edit {
            color: #007bff;
        }

            .action-link.edit:hover {
                background: #e3f2fd;
                color: #0056b3;
            }

        .action-link.delete {
            color: #dc3545;
        }

            .action-link.delete:hover {
                background: #f8d7da;
                color: #c82333;
            }

    .action-divider {
        border-top: 1px solid #e9ecef;
        margin: 5px 0;
    }

    /* Empty State */
    .empty-state {
        background: white;
        border-radius: 15px;
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.08);
        padding: 60px 40px;
        text-align: center;
        margin: 40px 0;
    }

    .empty-icon {
        color: #dee2e6;
        font-size: 80px;
        margin-bottom: 20px;
    }

    .empty-title {
        color: #495057;
        font-weight: 600;
        margin-bottom: 10px;
    }

    .empty-subtitle {
        color: #6c757d;
        margin-bottom: 30px;
        font-size: 16px;
    }

    .btn-create-first {
        background: linear-gradient(135deg, #007bff, #0056b3);
        border: none;
        color: white;
        border-radius: 25px;
        padding: 15px 30px;
        font-weight: 600;
        font-size: 16px;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(0, 123, 255, 0.3);
    }

        .btn-create-first:hover {
            background: linear-gradient(135deg, #0056b3, #004085);
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0, 123, 255, 0.4);
        }

        .btn-create-first span {
            margin-left: 8px;
        }

    /* Pagination */
    .pagination-wrapper {
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.08);
        padding: 20px;
        margin-top: 40px;
    }
</style>


@code {
    [Parameter] public int PageId { get; set; }
    private string _searchTerm = string.Empty;
    
    private DateTime? _createdFrom;
    private DateTime? _createdTo;

    private async Task SetCreatedFrom(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out var date))
        {
            _createdFrom = date;
        }
        else
        {
            _createdFrom = null;
        }
        await FetchEvents();
    }

    private async Task SetCreatedTo(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out var date))
        {
            _createdTo = date;
        }
        else
        {
            _createdTo = null;
        }
        await FetchEvents();
    }

    private async Task ClearDateFilters()
    {
        _createdFrom = null;
        _createdTo = null;
        await FetchEvents();
    }

    private IList<EventEntity> _eventList = new List<EventEntity>();
    private Pagination? _pagination;
    private DismissibleAlert? _alert;

    private const int ItemsPerPage = 9;
    private const int PagesBufferRange = 5;

    private long _pagesCount;
    private long _itemCount;

    protected override async Task OnParametersSetAsync()
    {
        PageId = PageId <= 0 ? 1 : PageId;
        _pagination?.SetCurrentPage(PageId);
        await FetchEvents();
    }

    private async Task DeleteEvent(Guid eventId)
    {
        var result = await Mediator.Send(new DeleteCommand
            { Id = eventId, DeletedBy = AuthenticationState.User?.Id });

        switch (result.Result)
        {
            case 1:
                _alert?.ShowSuccess("Event deleted successfully.");
                var eventIndex = _eventList.ToList().FindIndex(c => c.Id == eventId);
                if (eventIndex >= 0) _eventList.RemoveAt(eventIndex);
                break;
            case -1:
                _alert?.ShowError("Failed to delete event.");
                break;
            default:
                _alert?.ShowError("An error occurred while deleting the event.");
                break;
        }
    }

    private async Task OnSearchInputChanged(ChangeEventArgs e)
    {
        _searchTerm = e.Value?.ToString() ?? string.Empty;
        PageId = 1;
        await FetchEvents();
    }

    private async Task FetchEvents()
    {
        if (AuthenticationState.User?.Id != null)
        {
            var result = await Mediator.Send(new GetPagedQuery
            {
                PageNumber = PageId,
                PageSize = ItemsPerPage,
                SearchTerm = _searchTerm,
                CreatedFrom = _createdFrom,
                CreatedTo = _createdTo
            });
        
            if (result.Items != null)
            {
                _eventList = result.Items;
                _itemCount = result.TotalCount;
            }
            _pagesCount = Convert.ToInt64(Math.Ceiling((double)_itemCount / ItemsPerPage));
            _pagination?.SetPagesCount(_pagesCount);
        }
    }

    private async Task ExportToCsv()
    {
        if (!_eventList.Any())
        {
            _alert?.ShowError("No data available to export.");
            return;
        }

        const string header = "Date,Name,Created At,Created By,Updated At,Updated By";

        await CsvExporter.ExportListToCSV(_eventList, "Events", header, Func);
        return;

        string Func(EventEntity data) => 
            $"{data.Date:yyyy-MM-dd}," +
            $"\"{data.Name}\"," +
            $"\"{data.Location}\"," +
            $"\"{data.StartTimeString}\"," +
            $"\"{data.EndTimeString}\"," +
            $"{data.CreatedAt:yyyy-MM-dd HH:mm:ss}," +
            $"\"{data.CreatedByName}\"," +
            $"{data.UpdatedAt:yyyy-MM-dd HH:mm:ss}," +
            $"\"{data.UpdatedByName}\"";
    }
}