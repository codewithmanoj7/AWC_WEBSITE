@page "/site/page-contents"
@page "/site/page-contents/{PageId:int}"
@using AWC.CQRS.Commands.PageContent
@using AWC.CQRS.Queries.PageContent
@using AWC.CQRS.Queries.NavigationMenu
@inject IAuthenticationStateService AuthenticationState
@inject INavigationService NavigationService
@inject IMediator Mediator
@inject ICsvExporterService CsvExporter
@inject IPermissionStylingService PermissionStyling
@layout AuthorizedLayout
@rendermode InteractiveServer

<PageTitle>Page Content Management</PageTitle>

<RenderPermission Permissions="new[] { UserPermissionsEnum.Administrator, UserPermissionsEnum.ContentManager }"
                  RedirectIfInvalid="true">
    <div class="container-fluid">

        <!-- Main Header -->
        <div class="row">
            <div class="col-md-12">
                <div class="panel panel-primary">
                    <div class="panel-heading">
                        <div class="row">
                            <div class="col-sm-8">
                                <h3 class="panel-title">
                                    <i class="fa fa-file-text-o"></i> Page Content Management
                                    @if (_selectedMenu != null)
                                    {
                                        <small class="text-primary-light">- @_selectedMenu.Name</small>
                                    }
                                </h3>
                            </div>
                            <div class="col-sm-4 text-right">
                                <button type="button" class="btn btn-success btn-sm" @onclick="CreateNewContent">
                                    <i class="fa fa-plus"></i> Add New Content
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- System Information Panel -->
        <div class="row">
            <div class="col-md-12">
                <div class="panel panel-info">
                    <div class="panel-heading">
                        <h4 class="panel-title">
                            <button type="button"
                                    class="btn btn-link panel-collapse-btn @(_isSystemInfoExpanded ? "" : "collapsed")"
                                    @onclick="ToggleSystemInfo"
                                    aria-expanded="@_isSystemInfoExpanded.ToString().ToLower()">
                                <i class="fa fa-info-circle"></i> System Information
                                <small class="pull-right">
                                    <i class="fa fa-chevron-@(_isSystemInfoExpanded ? "up" : "down")"></i>
                                </small>
                            </button>
                        </h4>
                    </div>
                    <div class="panel-collapse @(_isSystemInfoExpanded ? "in" : "collapse")">
                        <div class="panel-body">
                            <div class="row">
                                <div class="col-md-4 col-sm-6">
                                    <dl class="dl-horizontal">
                                        <dt>URL Parameter:</dt>
                                        <dd><code>@(MenuId?.ToString() ?? "Not specified")</code></dd>
                                        <dt>Selected Menu ID:</dt>
                                        <dd><code>@(string.IsNullOrEmpty(_selectedMenuId) ? "None" : _selectedMenuId)</code></dd>
                                    </dl>
                                </div>
                                <div class="col-md-4 col-sm-6">
                                    <dl class="dl-horizontal">
                                        <dt>Selected Menu:</dt>
                                        <dd><strong>@(_selectedMenu?.Name ?? "No menu selected")</strong></dd>
                                        <dt>Available Menus:</dt>
                                        <dd><span class="badge">@_navigationMenus.Count</span> menu(s)</dd>
                                    </dl>
                                </div>
                                <div class="col-md-4 col-sm-12">
                                    <dl class="dl-horizontal">
                                        <dt>Content Items:</dt>
                                        <dd><span class="badge">@_contentList.Count</span> item(s)</dd>
                                        <dt>System Status:</dt>
                                        <dd>
                                            @if (_isLoading)
                                            {
                                                <span class="label label-warning">
                                                    <i class="fa fa-spinner fa-spin"></i> Loading...
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="label label-success">
                                                    <i class="fa fa-check"></i> Ready
                                                </span>
                                            }
                                        </dd>
                                    </dl>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Error Alert -->
        @if (!string.IsNullOrEmpty(_errorMessage))
        {
            <div class="row">
                <div class="col-md-12">
                    <div class="alert alert-danger" role="alert">
                        <h4><i class="fa fa-exclamation-triangle"></i> System Error</h4>
                        <pre class="error-details">@_errorMessage</pre>
                    </div>
                </div>
            </div>
        }

        <!-- Loading State -->
        @if (_isLoading)
        {
            <div class="row">
                <div class="col-md-12">
                    <div class="well well-lg text-center">
                        <i class="fa fa-spinner fa-spin fa-3x text-primary"></i>
                        <h4 class="text-primary">Loading Content Data...</h4>
                        <p class="text-muted">Please wait while we fetch your content information.</p>
                    </div>
                </div>
            </div>
        }

        <!-- Content Display -->
        @if (!_isLoading)
        {
            @if (_contentList.Any())
            {
                <!-- Statistics Row -->
                <div class="row">
                    <div class="col-md-4 col-sm-4">
                        <div class="panel panel-default">
                            <div class="panel-body text-center">
                                <i class="fa fa-files-o fa-2x text-primary"></i>
                                <h3 class="text-primary">@_contentList.Count</h3>
                                <p class="text-muted">Total Items</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4 col-sm-4">
                        <div class="panel panel-default">
                            <div class="panel-body text-center">
                                <i class="fa fa-check-circle fa-2x text-success"></i>
                                <h3 class="text-success">@_contentList.Count(c => c.IsActive)</h3>
                                <p class="text-muted">Active Content</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4 col-sm-4">
                        <div class="panel panel-default">
                            <div class="panel-body text-center">
                                <i class="fa fa-pause-circle fa-2x text-warning"></i>
                                <h3 class="text-warning">@_contentList.Count(c => !c.IsActive)</h3>
                                <p class="text-muted">Inactive Content</p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Content Table -->
                <div class="row">
                    <div class="col-md-12">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <h3 class="panel-title">
                                    <i class="fa fa-list"></i> Content Items
                                    <span class="badge pull-right">@_contentList.Count</span>
                                </h3>
                            </div>
                            <div class="panel-body">
                                <div class="table-responsive">
                                    <table class="table table-striped table-hover">
                                        <thead>
                                            <tr>
                                                <th><i class="fa fa-header"></i> Header</th>
                                                <th><i class="fa fa-text-width"></i> Sub Header</th>
                                                <th><i class="fa fa-sitemap"></i> Navigation Menu</th>
                                                <th><i class="fa fa-toggle-on"></i> Status</th>
                                                <th><i class="fa fa-calendar"></i> Created</th>
                                                <th><i class="fa fa-cogs"></i> Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var item in _contentList)
                                            {
                                                <tr class="@(item.IsActive ? "" : "warning")">
                                                    <td>
                                                        @if (!string.IsNullOrEmpty(item.Header))
                                                        {
                                                            <strong>@item.Header</strong>
                                                        }
                                                        else
                                                        {
                                                            <em class="text-muted">Untitled Content</em>
                                                        }
                                                    </td>
                                                    <td>
                                                        @if (!string.IsNullOrEmpty(item.SubHeader))
                                                        {
                                                            <span class="text-muted">@item.SubHeader</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="text-muted">—</span>
                                                        }
                                                    </td>
                                                    <td>
                                                        <span class="label label-default">@item.NavigationMenuName</span>
                                                    </td>
                                                    <td>
                                                        @if (item.IsActive)
                                                        {
                                                            <span class="label label-success">
                                                                <i class="fa fa-check"></i> Active
                                                            </span>
                                                        }
                                                        else
                                                        {
                                                            <span class="label label-warning">
                                                                <i class="fa fa-pause"></i> Inactive
                                                            </span>
                                                        }
                                                    </td>
                                                    <td>
                                                        <div>
                                                            <strong>@item.CreatedAt.ToString("MMM dd, yyyy")</strong>
                                                            <br>
                                                            <small class="text-muted">@item.CreatedAt.ToString("HH:mm")</small>
                                                        </div>
                                                    </td>
                                                    <td>
                                                        <div class="btn-group btn-group-sm" role="group">
                                                            <button type="button" class="btn btn-primary"
                                                                    @onclick="() => EditContent(item.Id)"
                                                                    title="Edit Content">
                                                                <i class="fa fa-edit"></i>
                                                            </button>
                                                            <button type="button" class="btn btn-danger"
                                                                    @onclick="() => DeleteContent(item.Id)"
                                                                    title="Delete Content">
                                                                <i class="fa fa-trash"></i>
                                                            </button>
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <!-- Empty State -->
                <div class="row">
                    <div class="col-md-8 col-md-offset-2">
                        <div class="well well-lg text-center">
                            <i class="fa fa-file-text-o fa-5x text-muted"></i>
                            <h3 class="text-muted">No Content Found</h3>
                            <p class="lead text-muted">
                                @if (_selectedMenu != null)
                                {
                                    <text>No content items found for the selected navigation menu: <strong>@_selectedMenu.Name</strong></text>
                                }
                                else
                                {
                                    <text>No page content has been created yet. Get started by adding your first content item.</text>
                                }
                            </p>
                            <button type="button" class="btn btn-primary btn-lg" @onclick="CreateNewContent">
                                <i class="fa fa-plus"></i> Create First Content
                            </button>
                        </div>
                    </div>
                </div>
            }
        }

        <!-- Alert Component -->
        <div class="row">
            <div class="col-md-12">
                <DismissibleAlert @ref="_alert" class="alert alert-info" />
            </div>
        </div>

    </div>
</RenderPermission>

<style>
    /* Custom Bootstrap 3 enhancements */
    .text-primary-light {
        color: #7bb3e0;
    }

    .error-details {
        background-color: transparent;
        border: none;
        color: inherit;
        font-size: 12px;
        margin-top: 10px;
        white-space: pre-wrap;
    }

    /* Panel collapse button styling */
    .panel-collapse-btn {
        width: 100%;
        text-align: left;
        padding: 0;
        border: none;
        background: none;
        color: inherit;
        font-size: inherit;
        font-weight: inherit;
    }

        .panel-collapse-btn:hover,
        .panel-collapse-btn:focus {
            text-decoration: none;
            color: inherit;
            background: none;
            box-shadow: none;
            outline: none;
        }

    /* Panel enhancements */
    .panel-heading .panel-title a {
        display: block;
        color: inherit;
        text-decoration: none;
    }

        .panel-heading .panel-title a:hover,
        .panel-heading .panel-title a:focus {
            text-decoration: none;
            color: inherit;
        }

    /* Table enhancements */
    .table > tbody > tr.warning > td {
        background-color: #fcf8e3;
    }

    .table > tbody > tr:hover > td {
        background-color: #f5f5f5;
    }

    /* Button enhancements */
    .btn-group-sm > .btn {
        margin-right: 2px;
    }

        .btn-group-sm > .btn:last-child {
            margin-right: 0;
        }

    /* Well customizations */
    .well-lg {
        padding: 40px;
    }

    /* Label spacing */
    .label {
        font-size: 11px;
        font-weight: normal;
    }

    /* Badge positioning */
    .panel-title .badge {
        font-size: 11px;
        margin-top: -2px;
    }

    /* Description list spacing */
    .dl-horizontal dt {
        width: 120px;
        font-size: 12px;
    }

    .dl-horizontal dd {
        margin-left: 140px;
        font-size: 13px;
    }


    /* Icon spacing */
    .fa + span,
    .fa + strong,
    .fa + em {
        margin-left: 5px;
    }

    /* Empty state icon */
    .fa-5x {
        margin-bottom: 20px;
    }

    /* Statistics panels hover effect */
    .panel-default:hover {
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        transition: box-shadow 0.2s ease;
    }
</style>

@code {
    [Parameter] public int PageId { get; set; }
    [Parameter, SupplyParameterFromQuery] public Guid? MenuId { get; set; }

    private string _selectedMenuId = "";
    private IList<PageContentEntity> _contentList = new List<PageContentEntity>();
    private IList<NavigationMenuEntity> _navigationMenus = new List<NavigationMenuEntity>();
    private NavigationMenuEntity? _selectedMenu;
    private DismissibleAlert? _alert;
    private bool _isLoading = true;
    private string _errorMessage = "";
    private bool _isSystemInfoExpanded = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _isLoading = true;
            _errorMessage = "";

            // Step 1: Load navigation menus first
            await LoadNavigationMenus();

            // Step 2: Set selected menu if MenuId is provided
            if (MenuId.HasValue)
            {
                _selectedMenuId = MenuId.Value.ToString();
                _selectedMenu = _navigationMenus.FirstOrDefault(m => m.Id == MenuId.Value);

                if (_selectedMenu == null)
                {
                    _errorMessage = $"Navigation menu with ID {MenuId.Value} not found.";
                }
            }

            // Step 3: Load content
            await FetchContent();
        }
        catch (Exception ex)
        {
            _errorMessage = $"Initialization error: {ex.Message}";
            if (ex.InnerException != null)
            {
                _errorMessage += $"\nInner Exception: {ex.InnerException.Message}";
            }
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadNavigationMenus()
    {
        try
        {
            var result = await Mediator.Send(new AWC.CQRS.Queries.NavigationMenu.GetAllQuery());
            _navigationMenus = result ?? new List<NavigationMenuEntity>();
        }
        catch (Exception ex)
        {
            _errorMessage += $"Error loading navigation menus: {ex.Message}\n";
            _navigationMenus = new List<NavigationMenuEntity>();
        }
    }

    private async Task FetchContent()
    {
        try
        {
            if (AuthenticationState?.User?.Id == null)
            {
                _errorMessage += "User authentication required.\n";
                return;
            }

            if (!string.IsNullOrEmpty(_selectedMenuId) && Guid.TryParse(_selectedMenuId, out var menuId))
            {
                // Filter by specific navigation menu
                var result = await Mediator.Send(new GetByNavigationMenuQuery(menuId));
                _contentList = result ?? new List<PageContentEntity>();
            }
            else
            {
                // Get all content
                var result = await Mediator.Send(new AWC.CQRS.Queries.PageContent.GetAllQuery());
                _contentList = result ?? new List<PageContentEntity>();
            }
        }
        catch (Exception ex)
        {
            _errorMessage += $"Error loading content: {ex.Message}\n";
            if (ex.InnerException != null)
            {
                _errorMessage += $"Inner Exception: {ex.InnerException.Message}\n";
            }
            _contentList = new List<PageContentEntity>();
        }
    }

    private async Task DeleteContent(Guid contentId)
    {
        try
        {
            var result = await Mediator.Send(new DeleteCommand
            {
                Id = contentId,
                DeletedBy = AuthenticationState.User?.Id
            });

            switch (result.Result)
            {
                case 1:
                    _alert?.ShowSuccess("Page content deleted successfully.");
                    await FetchContent();
                    break;
                case -1:
                    _alert?.ShowError("Failed to delete page content.");
                    break;
                default:
                    _alert?.ShowError("An error occurred while deleting the page content.");
                    break;
            }
        }
        catch (Exception ex)
        {
            _alert?.ShowError($"Error deleting content: {ex.Message}");
        }
    }

    private void CreateNewContent()
    {
        if (_selectedMenu != null)
        {
            NavigationService.NavigateTo($"/site/page-contents/create?menuId={_selectedMenu.Id}");
        }
        else
        {
            NavigationService.NavigateTo($"/site/page-contents/create");
        }
    }

    private void EditContent(Guid contentId)
    {
        NavigationService.NavigateTo($"/site/page-contents/{contentId}/edit");
    }

    private void ToggleSystemInfo()
    {
        _isSystemInfoExpanded = !_isSystemInfoExpanded;
    }
}