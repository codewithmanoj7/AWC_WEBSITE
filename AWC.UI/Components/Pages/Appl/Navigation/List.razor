@page "/site/navigation-menus"
@page "/site/navigation-menus/{PageId:int}"

@using AWC.CQRS.Commands.NavigationMenu
@using AWC.CQRS.Queries.NavigationMenu

@inject IAuthenticationStateService AuthenticationState
@inject INavigationService NavigationService
@inject IMediator Mediator
@inject ICsvExporterService CsvExporter
@inject IPermissionStylingService PermissionStyling
@layout AuthorizedLayout
@rendermode InteractiveServer

<PageTitle>Navigation Menu Management</PageTitle>

<RenderPermission Permissions="new[] { UserPermissionsEnum.Administrator, UserPermissionsEnum.ContentManager }"
                  RedirectIfInvalid="true">
    <div class="container-fluid dashboard-container">
        <!-- Header Section -->
        <div class="dashboard-header well" style="background-color: #f8f9fa; border: 1px solid #ddd; padding: 15px; border-radius: 4px;">
            <div class="row">
                <!-- Title -->
                <div class="col-md-8">
                    <h3 class="page-title" style="margin-top: 0; color: #007bff;">
                        <i class="fa fa-sitemap text-primary"></i> Navigation Menu Management
                    </h3>
                    <p class="text-muted" style="margin-bottom: 0;">
                        Manage your website's navigation structure and menu hierarchy
                    </p>
                </div>

                <!-- Actions -->
                <div class="col-md-4 text-right">
                    <div class="btn-group">
                        <button class="btn btn-default" @onclick="ExportToCsv" title="Export as CSV">
                            <i class="fa fa-download"></i> Export CSV
                        </button>
                        <button class="btn btn-primary"
                                @onclick="@(() => NavigationService.NavigateTo($"/site/navigation-menus/create"))"
                                title="Add a new menu">
                            <i class="fa fa-plus-circle"></i> Add New Menu
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Statistics Dashboard -->
        <div class="stats-section">
            <div class="row">
                <div class="col-lg-3 col-md-6 col-sm-6">
                    <div class="stats-card">
                        <div class="stats-card-body">
                            <div class="stats-icon stats-icon-primary">
                                <i class="fa fa-bars"></i>
                            </div>
                            <div class="stats-content">
                                <h3 class="stats-number">@_totalMenus</h3>
                                <p class="stats-label">Total Menus</p>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-3 col-md-6 col-sm-6">
                    <div class="stats-card">
                        <div class="stats-card-body">
                            <div class="stats-icon stats-icon-success">
                                <i class="fa fa-check-circle"></i>
                            </div>
                            <div class="stats-content">
                                <h3 class="stats-number">@_activeMenus</h3>
                                <p class="stats-label">Active Menus</p>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-3 col-md-6 col-sm-6">
                    <div class="stats-card">
                        <div class="stats-card-body">
                            <div class="stats-icon stats-icon-info">
                                <i class="fa fa-home"></i>
                            </div>
                            <div class="stats-content">
                                <h3 class="stats-number">@_level1Menus</h3>
                                <p class="stats-label">Main Menus</p>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-3 col-md-6 col-sm-6">
                    <div class="stats-card">
                        <div class="stats-card-body">
                            <div class="stats-icon stats-icon-warning">
                                <i class="fa fa-list-ul"></i>
                            </div>
                            <div class="stats-content">
                                <h3 class="stats-number">@_subMenus</h3>
                                <p class="stats-label">Sub Menus</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Filters Section -->
        <div class="filters-section">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <h4 class="panel-title">
                        <i class="fa fa-filter text-muted"></i> Search & Filter Options
                    </h4>
                </div>
                <div class="panel-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="control-label">Search Menus</label>
                                <div class="input-group">
                                    <span class="input-group-addon">
                                        <i class="fa fa-search"></i>
                                    </span>
                                    <input type="text" class="form-control"
                                           placeholder="Type to search navigation menus..."
                                           @bind="_searchTerm" @oninput="OnSearchInputChanged" />
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                <label class="control-label">Filter by Level</label>
                                <select class="form-control" @onchange="OnFilterChanged">
                                    <option value="0">All Levels</option>
                                    <option value="1">Level 1 (Main Menu)</option>
                                    <option value="2">Level 2 (Submenu)</option>
                                    <option value="3">Level 3 (Sub-submenu)</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                <label class="control-label">Filter by Status</label>
                                <select class="form-control" @onchange="OnFilterChanged">
                                    <option value="">All Status</option>
                                    <option value="true">Active Only</option>
                                    <option value="false">Inactive Only</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Menu Hierarchy Section -->
        <div class="hierarchy-section">
            <div class="col-md-12">
                <DismissibleAlert @ref="_alert" class="alert alert-info" />

                @if (_menuList.Any())
                {
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <div class="panel-header-content">
                                <div class="panel-title">
                                    <h4 class="panel-title-text">
                                        <i class="fa fa-sitemap text-primary"></i>
                                        Navigation Menu Hierarchy
                                    </h4>
                                </div>
                                <div class="panel-badge">
                                    <span class="badge">@_menuList.Count items</span>
                                </div>
                            </div>
                        </div>
                        <div class="panel-body">
                            <div class="navigation-tree">
                                @foreach (var item in _menuList.Where(m => m.Level == 1))
                                {
                                    <div class="menu-item level-1" data-level="1">
                                        <div class="menu-item-content @(item.IsActive ? "active" : "inactive")">
                                            <div class="menu-info">
                                                <div class="menu-header">
                                                    <div class="menu-icon-title">
                                                        <i class="fa @GetMenuIcon(item) menu-icon level-1-icon"></i>
                                                        <strong class="menu-name">@item.Name</strong>
                                                    </div>
                                                    <div class="menu-badges">
                                                        @if (!string.IsNullOrEmpty(item.Url))
                                                        {
                                                            <span class="menu-url">@item.Url</span>
                                                        }
                                                        <span class="status-badge @(item.IsActive ? "status-active" : "status-inactive")">
                                                            @(item.IsActive ? "Active" : "Inactive")
                                                        </span>
                                                        @if (item.ChildCount > 0)
                                                        {
                                                            <span class="child-badge">@item.ChildCount children</span>
                                                        }
                                                    </div>
                                                </div>
                                                @if (!string.IsNullOrEmpty(item.Description))
                                                {
                                                    <p class="menu-description">@item.Description</p>
                                                }
                                                <div class="menu-meta">
                                                    <span class="meta-item">
                                                        <i class="fa fa-sort-numeric-asc"></i> Order: @item.SortOrder
                                                    </span>
                                                    <span class="meta-item">
                                                        <i class="fa fa-calendar"></i> Created: @item.CreatedAt.ToString("MMM dd, yyyy")
                                                    </span>
                                                </div>
                                            </div>
                                            <div class="menu-actions">
                                                <div class="btn-group">
                                                    <a href="@($"/site/navigation-menus/{item.Id}/edit")" 
                                                       class="btn btn-primary btn-sm" title="Edit Menu">
                                                        <i class="fa fa-edit"></i>
                                                    </a>
                                                    <button class="btn btn-success btn-sm" 
                                                            @onclick="() => CreateChild(item.Id, item.Level)" 
                                                            title="Add Child Menu">
                                                        <i class="fa fa-plus"></i>
                                                    </button>
                                                    <button class="btn btn-info btn-sm" 
                                                            @onclick="() => ManageContent(item.Id)" 
                                                            title="Manage Content">
                                                        <i class="fa fa-file-text-o"></i>
                                                    </button>
                                                    <button class="btn btn-danger btn-sm" 
                                                            @onclick="() => DeleteMenu(item.Id)"
                                                            disabled="@(item.ChildCount > 0)"
                                                            title="@(item.ChildCount > 0 ? "Cannot delete menu with children" : "Delete Menu")">
                                                        <i class="fa fa-trash-o"></i>
                                                    </button>
                                                </div>
                                            </div>
                                        </div>

                                        <!-- Level 2 Children -->
                                        @foreach (var child in _menuList.Where(m => m.ParentId == item.Id && m.Level == 2))
                                        {
                                            <div class="menu-item level-2" data-level="2">
                                                <div class="menu-item-content @(child.IsActive ? "active" : "inactive")">
                                                    <div class="menu-info">
                                                        <div class="menu-header">
                                                            <div class="menu-icon-title">
                                                                <i class="fa fa-angle-right level-indicator"></i>
                                                                <i class="fa @GetMenuIcon(child) menu-icon level-2-icon"></i>
                                                                <strong class="menu-name">@child.Name</strong>
                                                            </div>
                                                            <div class="menu-badges">
                                                                @if (!string.IsNullOrEmpty(child.Url))
                                                                {
                                                                    <span class="menu-url">@child.Url</span>
                                                                }
                                                                <span class="status-badge @(child.IsActive ? "status-active" : "status-inactive")">
                                                                    @(child.IsActive ? "Active" : "Inactive")
                                                                </span>
                                                                @if (child.ChildCount > 0)
                                                                {
                                                                    <span class="child-badge">@child.ChildCount children</span>
                                                                }
                                                            </div>
                                                        </div>
                                                        @if (!string.IsNullOrEmpty(child.Description))
                                                        {
                                                            <p class="menu-description">@child.Description</p>
                                                        }
                                                        <div class="menu-meta">
                                                            <span class="meta-item">
                                                                <i class="fa fa-sort-numeric-asc"></i> Order: @child.SortOrder
                                                            </span>
                                                            <span class="meta-item">
                                                                <i class="fa fa-calendar"></i> Created: @child.CreatedAt.ToString("MMM dd, yyyy")
                                                            </span>
                                                        </div>
                                                    </div>
                                                    <div class="menu-actions">
                                                        <div class="btn-group">
                                                            <a href="@($"/site/navigation-menus/{child.Id}/edit")" 
                                                               class="btn btn-primary btn-sm">
                                                                <i class="fa fa-edit"></i>
                                                            </a>
                                                            @if (child.Level < 3)
                                                            {
                                                                <button class="btn btn-success btn-sm" 
                                                                        @onclick="() => CreateChild(child.Id, child.Level)">
                                                                    <i class="fa fa-plus"></i>
                                                                </button>
                                                            }
                                                            <button class="btn btn-info btn-sm" 
                                                                    @onclick="() => ManageContent(child.Id)">
                                                                <i class="fa fa-file-text-o"></i>
                                                            </button>
                                                            <button class="btn btn-danger btn-sm" 
                                                                    @onclick="() => DeleteMenu(child.Id)"
                                                                    disabled="@(child.ChildCount > 0)">
                                                                <i class="fa fa-trash-o"></i>
                                                            </button>
                                                        </div>
                                                    </div>
                                                </div>

                                                <!-- Level 3 Children -->
                                                @foreach (var grandChild in _menuList.Where(m => m.ParentId == child.Id && m.Level == 3))
                                                {
                                                    <div class="menu-item level-3" data-level="3">
                                                        <div class="menu-item-content @(grandChild.IsActive ? "active" : "inactive")">
                                                            <div class="menu-info">
                                                                <div class="menu-header">
                                                                    <div class="menu-icon-title">
                                                                        <i class="fa fa-angle-right level-indicator"></i>
                                                                        <i class="fa fa-angle-right level-indicator"></i>
                                                                        <i class="fa @GetMenuIcon(grandChild) menu-icon level-3-icon"></i>
                                                                        <strong class="menu-name">@grandChild.Name</strong>
                                                                    </div>
                                                                    <div class="menu-badges">
                                                                        @if (!string.IsNullOrEmpty(grandChild.Url))
                                                                        {
                                                                            <span class="menu-url">@grandChild.Url</span>
                                                                        }
                                                                        <span class="status-badge @(grandChild.IsActive ? "status-active" : "status-inactive")">
                                                                            @(grandChild.IsActive ? "Active" : "Inactive")
                                                                        </span>
                                                                    </div>
                                                                </div>
                                                                @if (!string.IsNullOrEmpty(grandChild.Description))
                                                                {
                                                                    <p class="menu-description">@grandChild.Description</p>
                                                                }
                                                                <div class="menu-meta">
                                                                    <span class="meta-item">
                                                                        <i class="fa fa-sort-numeric-asc"></i> Order: @grandChild.SortOrder
                                                                    </span>
                                                                    <span class="meta-item">
                                                                        <i class="fa fa-calendar"></i> Created: @grandChild.CreatedAt.ToString("MMM dd, yyyy")
                                                                    </span>
                                                                </div>
                                                            </div>
                                                            <div class="menu-actions">
                                                                <div class="btn-group">
                                                                    <a href="@($"/site/navigation-menus/{grandChild.Id}/edit")" 
                                                                       class="btn btn-primary btn-sm">
                                                                        <i class="fa fa-edit"></i>
                                                                    </a>
                                                                    <button class="btn btn-info btn-sm" 
                                                                            @onclick="() => ManageContent(grandChild.Id)">
                                                                        <i class="fa fa-file-text-o"></i>
                                                                    </button>
                                                                    <button class="btn btn-danger btn-sm" 
                                                                            @onclick="() => DeleteMenu(grandChild.Id)">
                                                                        <i class="fa fa-trash-o"></i>
                                                                    </button>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        }
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="empty-state panel panel-default">
                        <div class="panel-body text-center">
                            <div class="empty-state-icon">
                                <i class="fa fa-sitemap text-muted"></i>
                            </div>
                            <h3 class="empty-state-title">No navigation menus found</h3>
                            <p class="empty-state-description">Create your first navigation menu to get started with dynamic site navigation.</p>
                            <button class="btn btn-primary btn-lg" @onclick="@(() => NavigationService.NavigateTo($"/site/navigation-menus/create"))">
                                <i class="fa fa-plus-circle"></i> Create First Menu
                            </button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</RenderPermission>

<style>
    /* Government Site Clean Design */
    .dashboard-container {
        background-color: #ffffff;
        padding: 20px;
        font-family: 'Segoe UI', Arial, sans-serif;
    }

    /* Header Section - Clean and Professional */
    .dashboard-header {
        background-color: #ffffff;
        border: 1px solid #ddd;
        border-radius: 4px;
        padding: 25px;
        margin-bottom: 25px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }

    .page-title {
        font-size: 28px;
        font-weight: 600;
        color: #333;
        margin: 0 0 8px 0;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .page-subtitle {
        color: #666;
        font-size: 14px;
        margin: 0;
        font-weight: normal;
    }

    .header-actions {
        text-align: right;
        margin-top: 10px;
    }

    .header-actions .btn {
        margin-left: 8px;
    }

    /* Statistics Cards - Government Appropriate */
    .stats-section {
        margin-bottom: 25px;
    }

    .stats-card {
        background: #ffffff;
        border: 1px solid #ddd;
        border-radius: 4px;
        margin-bottom: 20px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        transition: box-shadow 0.2s ease;
    }

    .stats-card:hover {
        box-shadow: 0 2px 6px rgba(0,0,0,0.15);
    }

    .stats-card-body {
        padding: 20px;
        display: flex;
        align-items: center;
    }

    .stats-icon {
        width: 50px;
        height: 50px;
        border-radius: 4px;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 15px;
        font-size: 20px;
        color: #fff;
    }

    .stats-icon-primary {
        background-color: #337ab7;
    }

    .stats-icon-success {
        background-color: #5cb85c;
    }

    .stats-icon-info {
        background-color: #5bc0de;
    }

    .stats-icon-warning {
        background-color: #f0ad4e;
    }

    .stats-content h3 {
        font-size: 24px;
        font-weight: 700;
        margin: 0 0 4px 0;
        color: #333;
    }

    .stats-label {
        color: #666;
        font-size: 13px;
        margin: 0;
        font-weight: 500;
    }

    /* Panel Styling */
    .panel {
        margin-bottom: 20px;
        border: 1px solid #ddd;
        border-radius: 4px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }

    .panel-heading {
        background-color: #f5f5f5;
        border-bottom: 1px solid #ddd;
        padding: 15px;
    }

    .panel-title {
        margin: 0;
        font-size: 16px;
        font-weight: 600;
        color: #333;
    }

    .panel-header-content {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .panel-title-text {
        margin: 0;
        font-size: 16px;
        font-weight: 600;
        color: #333;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .panel-badge .badge {
        background-color: #337ab7;
        color: #fff;
        padding: 4px 8px;
        border-radius: 3px;
        font-size: 11px;
    }

    .panel-body {
        padding: 20px;
    }

    /* Form Controls */
    .form-group {
        margin-bottom: 15px;
    }

    .form-group label {
        font-weight: 600;
        color: #333;
        margin-bottom: 5px;
        font-size: 13px;
    }

    .form-control {
        border: 1px solid #ccc;
        border-radius: 3px;
        padding: 8px 12px;
        font-size: 13px;
        color: #333;
        background-color: #fff;
    }

    .form-control:focus {
        border-color: #337ab7;
        outline: none;
        box-shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 0 3px rgba(51,122,183,.1);
    }

    .input-group-addon {
        background-color: #f5f5f5;
        border: 1px solid #ccc;
        border-right: none;
        color: #666;
        padding: 8px 12px;
        font-size: 13px;
    }

    /* Navigation Tree */
    .navigation-tree {
        font-family: 'Segoe UI', Arial, sans-serif;
    }

    .menu-item {
        margin-bottom: 10px;
    }

    .menu-item.level-1 {
        margin-left: 0;
    }

    .menu-item.level-2 {
        margin-left: 30px;
        border-left: 2px solid #e0e0e0;
        padding-left: 15px;
    }

    .menu-item.level-3 {
        margin-left: 60px;
        border-left: 2px solid #e0e0e0;
        padding-left: 15px;
    }

    .menu-item-content {
        background: #ffffff;
        border: 1px solid #ddd;
        border-radius: 3px;
        padding: 15px;
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        transition: border-color 0.2s ease;
    }

    .menu-item-content:hover {
        border-color: #337ab7;
    }

    .menu-item-content.active {
        border-left: 3px solid #5cb85c;
    }

    .menu-item-content.inactive {
        border-left: 3px solid #d9534f;
        background-color: #fafafa;
    }

    .menu-info {
        flex: 1;
        margin-right: 15px;
    }

    .menu-header {
        margin-bottom: 8px;
    }

    .menu-icon-title {
        display: flex;
        align-items: center;
        gap: 8px;
        margin-bottom: 6px;
    }

    .menu-icon {
        font-size: 14px;
        width: 16px;
        text-align: center;
    }

    .level-1-icon {
        color: #337ab7;
    }

    .level-2-icon {
        color: #5cb85c;
    }

    .level-3-icon {
        color: #f0ad4e;
    }

    .level-indicator {
        color: #999;
        font-size: 12px;
    }

    .menu-name {
        color: #333;
        font-size: 14px;
        font-weight: 600;
    }

    .menu-badges {
        display: flex;
        gap: 6px;
        flex-wrap: wrap;
        align-items: center;
    }

    .menu-url {
        background-color: #f5f5f5;
        color: #666;
        padding: 2px 6px;
        border-radius: 3px;
        font-size: 11px;
        font-family: monospace;
    }

    .status-badge {
        padding: 2px 6px;
        border-radius: 3px;
        font-size: 11px;
        font-weight: 500;
    }

    .status-active {
        background-color: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }

    .status-inactive {
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }

    .child-badge {
        background-color: #d1ecf1;
        color: #0c5460;
        padding: 2px 6px;
        border-radius: 3px;
        font-size: 11px;
        font-weight: 500;
        border: 1px solid #bee5eb;
    }

    .menu-description {
        color: #666;
        font-size: 12px;
        line-height: 1.4;
        margin: 6px 0;
        font-style: italic;
    }

    .menu-meta {
        display: flex;
        gap: 12px;
        margin-top: 8px;
    }

    .meta-item {
        color: #999;
        font-size: 11px;
        display: flex;
        align-items: center;
        gap: 3px;
    }

    .menu-actions {
        flex-shrink: 0;
    }

    .btn-group .btn {
        margin-right: 2px;
        border-radius: 3px;
    }

    .btn-group .btn:last-child {
        margin-right: 0;
    }

    .btn-sm {
        padding: 5px 10px;
        font-size: 12px;
    }

    /* Button Styling - Government Appropriate */
    .btn {
        border-radius: 3px;
        font-weight: 500;
        border: 1px solid transparent;
        transition: all 0.2s ease;
    }

    .btn-primary {
        background-color: #337ab7;
        border-color: #2e6da4;
        color: #fff;
    }

    .btn-primary:hover {
        background-color: #286090;
        border-color: #204d74;
    }

    .btn-success {
        background-color: #5cb85c;
        border-color: #4cae4c;
        color: #fff;
    }

    .btn-success:hover {
        background-color: #449d44;
        border-color: #398439;
    }

    .btn-info {
        background-color: #5bc0de;
        border-color: #46b8da;
        color: #fff;
    }

    .btn-info:hover {
        background-color: #31b0d5;
        border-color: #269abc;
    }

    .btn-danger {
        background-color: #d9534f;
        border-color: #d43f3a;
        color: #fff;
    }

    .btn-danger:hover {
        background-color: #c9302c;
        border-color: #ac2925;
    }

    .btn-default {
        background-color: #fff;
        border-color: #ccc;
        color: #333;
    }

    .btn-default:hover {
        background-color: #f5f5f5;
        border-color: #adadad;
    }

    .btn:disabled {
        opacity: 0.65;
        cursor: not-allowed;
    }

    /* Empty State */
    .empty-state .panel-body {
        padding: 40px 20px;
    }

    .empty-state-icon {
        font-size: 48px;
        color: #ccc;
        margin-bottom: 20px;
    }

    .empty-state-title {
        color: #333;
        font-size: 20px;
        font-weight: 600;
        margin-bottom: 10px;
    }

    .empty-state-description {
        color: #666;
        font-size: 14px;
        margin-bottom: 20px;
        max-width: 400px;
        margin-left: auto;
        margin-right: auto;
    }


    /* Accessibility */
    .btn:focus,
    .form-control:focus {
        outline: none;
    }

    .menu-item-content:focus-within {
        border-color: #337ab7;
        box-shadow: 0 0 0 2px rgba(51, 122, 183, 0.2);
    }

    /* Text Colors for Government Site */
    .text-primary {
        color: #337ab7 !important;
    }

    .text-muted {
        color: #777 !important;
    }

    /* Alert Styling */
    .alert {
        padding: 15px;
        margin-bottom: 20px;
        border: 1px solid transparent;
        border-radius: 4px;
    }

    .alert-info {
        background-color: #d9edf7;
        border-color: #bce8f1;
        color: #31708f;
    }

    /* Table-like spacing for better readability */
    .navigation-tree > .menu-item:not(:last-child) {
        border-bottom: 1px solid #f0f0f0;
        padding-bottom: 10px;
        margin-bottom: 10px;
    }

    /* Subtle animation for professional look */
    .menu-item-content,
    .stats-card,
    .btn {
        transition: all 0.2s ease-in-out;
    }

    /* Icon consistency */
    .fa {
        display: inline-block;
        font: normal normal normal 14px/1 FontAwesome;
        font-size: inherit;
        text-rendering: auto;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }

    /* Focus indicators for better accessibility */
    .btn:focus {
        box-shadow: 0 0 0 2px rgba(51, 122, 183, 0.5);
    }

    .form-control:focus {
        box-shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 0 2px rgba(51, 122, 183, 0.3);
    }
</style>
@code {
    [Parameter] public int PageId { get; set; }
    private string _searchTerm = string.Empty;
    private int _filterLevel = 0;
    private string _filterStatus = "";

    private IList<NavigationMenuEntity> _menuList = new List<NavigationMenuEntity>();
    private IList<NavigationMenuEntity> _filteredMenuList = new List<NavigationMenuEntity>();
    private DismissibleAlert? _alert;

    // Statistics
    private int _totalMenus = 0;
    private int _activeMenus = 0;
    private int _level1Menus = 0;
    private int _subMenus = 0;

    protected override async Task OnInitializedAsync()
    {
        await FetchMenus();
    }

    private async Task DeleteMenu(Guid menuId)
    {
        var result = await Mediator.Send(new DeleteCommand
            { Id = menuId, DeletedBy = AuthenticationState.User?.Id });

        switch (result.Result)
        {
            case 1:
                _alert?.ShowSuccess("Navigation menu deleted successfully.");
                await FetchMenus();
                break;
            case -1:
                _alert?.ShowError("Failed to delete navigation menu. Please ensure it has no child menus or associated content.");
                break;
            default:
                _alert?.ShowError("An error occurred while deleting the navigation menu.");
                break;
        }
    }

    private async Task OnSearchInputChanged(ChangeEventArgs e)
    {
        _searchTerm = e.Value?.ToString() ?? string.Empty;
        ApplyFilters();
    }

    private async Task OnFilterChanged(ChangeEventArgs e)
    {
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        _filteredMenuList = _menuList.Where(m =>
            (string.IsNullOrEmpty(_searchTerm) || 
             m.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ||
             m.Description.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ||
             (!string.IsNullOrEmpty(m.Url) && m.Url.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase))) &&
            (_filterLevel == 0 || m.Level == _filterLevel) &&
            (string.IsNullOrEmpty(_filterStatus) || m.IsActive.ToString().Equals(_filterStatus, StringComparison.OrdinalIgnoreCase))
        ).ToList();
        
        UpdateStatistics();
    }

    private async Task FetchMenus()
    {
        if (AuthenticationState.User?.Id != null)
        {
            var result = await Mediator.Send(new GetAllQuery());
            _menuList = result ?? new List<NavigationMenuEntity>();
            _filteredMenuList = _menuList;
            UpdateStatistics();
        }
    }

    private void UpdateStatistics()
    {
        _totalMenus = _menuList.Count;
        _activeMenus = _menuList.Count(m => m.IsActive);
        _level1Menus = _menuList.Count(m => m.Level == 1);
        _subMenus = _menuList.Count(m => m.Level > 1);
    }

    private void CreateChild(Guid parentId, byte parentLevel)
    {
        if (parentLevel >= 3)
        {
            _alert?.ShowError("Maximum menu level (3) reached. Cannot create deeper submenus.");
            return;
        }
        NavigationService.NavigateTo($"/site/navigation-menus/create?parentId={parentId}");
    }

    private void ManageContent(Guid menuId)
    {
        NavigationService.NavigateTo($"/site/page-contents?menuId={menuId}");
    }

    private string GetMenuIcon(NavigationMenuEntity menu)
    {
        if (!string.IsNullOrEmpty(menu.Icon))
            return menu.Icon;
        
        return menu.Level switch
        {
            1 => "fa-home",
            2 => "fa-folder",
            3 => "fa-file",
            _ => "fa-circle"
        };
    }

    private async Task ExportToCsv()
    {
        if (!_menuList.Any())
        {
            _alert?.ShowError("No data available to export.");
            return;
        }

        const string header = "Level,Name,URL,Description,Sort Order,Active,Parent,Created At,Created By";

        await CsvExporter.ExportListToCSV(_menuList, "NavigationMenus", header, Func);
        return;

        string Func(NavigationMenuEntity data) => 
            $"Level {data.Level}," +
            $"{data.Name}," +
            $"{data.Url}," +
            $"{data.Description}," +
            $"{data.SortOrder}," +
            $"{(data.IsActive ? "Yes" : "No")}," +
            $"{data.ParentName}," +
            $"{data.CreatedAt:yyyy-MM-dd HH:mm:ss}," +
            $"{data.CreatedByName}";
    }
}