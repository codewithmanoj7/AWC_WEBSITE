@* @page "/site/pages"
@page "/site/pages/{PageId:int}" *@

@using AWC.CQRS.Commands.Page
@using AWC.CQRS.Queries.Page

@inject IAuthenticationStateService AuthenticationState
@inject INavigationService NavigationService
@inject IMediator Mediator
@inject ICsvExporterService CsvExporter
@inject IPermissionStylingService PermissionStyling
@layout AuthorizedLayout
@rendermode InteractiveServer

<PageTitle>Pages</PageTitle>

<RenderPermission Permissions="new[] { UserPermissionsEnum.Administrator, UserPermissionsEnum.ContentManager }"
                  RedirectIfInvalid="true">
    <div class="container">
        <!-- Header -->
        <div class="panel panel-primary">
            <div class="panel-heading clearfix">
                <h3 class="panel-title pull-left">
                    <i class="fa fa-file-text"></i> Pages Management
                </h3>
                <div class="pull-right">
                    <button class="btn btn-default btn-sm" @onclick="ExportToCsv">
                        <i class="fa fa-download"></i> Export CSV
                    </button>
                    <button class="btn btn-warning btn-sm" @onclick="@(() => NavigationService.NavigateTo($"/site/pages/create"))">
                        <i class="fa fa-plus-circle"></i> Add New Page
                    </button>
                </div>
            </div>
        </div>

        <!-- Search -->
        <div class="panel panel-default">
            <div class="panel-body">
                <div class="row">
                    <div class="col-md-8">
                        <div class="input-group">
                            <span class="input-group-addon"><i class="fa fa-search"></i></span>
                            <input type="text" class="form-control"
                                   placeholder="Search pages..."
                                   @bind="_searchTerm" @oninput="OnSearchInputChanged" />
                        </div>
                    </div>
                    <div class="col-md-4 text-right">
                        <div class="dropdown">
                            <button class="btn btn-default dropdown-toggle" type="button" data-toggle="dropdown">
                                <i class="fa fa-filter"></i> Filters <span class="caret"></span>
                            </button>
                            <ul class="dropdown-menu dropdown-menu-right">
                                <li class="px-3 py-2">
                                    <label>Created From</label>
                                    <input type="date" class="form-control input-sm" value="@(_createdFrom?.ToString("yyyy-MM-dd") ?? "")" @onchange="@(e => SetCreatedFrom(e))" />
                                </li>
                                <li class="px-3 py-2">
                                    <label>Created To</label>
                                    <input type="date" class="form-control input-sm" value="@(_createdTo?.ToString("yyyy-MM-dd") ?? "")" @onchange="@(e => SetCreatedTo(e))" />
                                </li>
                                <li class="divider"></li>
                                <li>
                                    <a href="javascript:void(0);" class="text-danger" @onclick="ClearDateFilters">
                                        <i class="fa fa-times-circle"></i> Clear Filters
                                    </a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Results Count -->
        @{
            var numFrom = (PageId - 1) * ItemsPerPage + 1;
            var numTo = (PageId * ItemsPerPage) > _itemCount ? _itemCount : (PageId * ItemsPerPage);
        }
        <div class="alert alert-info">
            <i class="fa fa-info-circle"></i> Displaying <strong>@numFrom-@numTo</strong> of <strong>@_itemCount</strong> pages
        </div>

        @if (_createdFrom.HasValue || _createdTo.HasValue)
        {
            <div class="alert alert-warning">
                <i class="fa fa-filter"></i>
                Filtering by date:
                @(_createdFrom.HasValue ? $"from {_createdFrom.Value:yyyy-MM-dd} " : "")
                @(_createdTo.HasValue ? $"to {_createdTo.Value:yyyy-MM-dd}" : "")
                <button class="btn btn-xs btn-warning" @onclick="ClearDateFilters">
                    <i class="fa fa-times"></i> Clear
                </button>
            </div>
        }

        <!-- Pages Grid -->
        <div class="row">
            <div class="col-md-12">
                <DismissibleAlert @ref="_alert" class="alert alert-info" />

                @if (_pageList.Count > 0)
                {
                    <div class="row">
                        @foreach (var item in _pageList)
                        {
                            <div class="col-md-4">
                                <div class="panel panel-default">
                                    <div class="panel-heading">
                                        <strong>@item.Name</strong>
                                        <span class="badge pull-right">@item.CreatedAt.ToString("MMM dd")</span>
                                    </div>
                                    <div class="panel-body">
                                        <p><i class="fa fa-link text-info"></i> /@item.Url</p>
                                        @if (!string.IsNullOrEmpty(item.Description))
                                        {
                                            <p>@(item.Description.Length > 100 ? item.Description.Substring(0, 100) + "..." : item.Description)</p>
                                        }
                                        @if (!string.IsNullOrEmpty(item.Pdf))
                                        {
                                            <a href="@item.Pdf" class="btn btn-xs btn-danger" download>
                                                <i class="fa fa-file-pdf-o"></i> PDF
                                            </a>
                                        }
                                    </div>
                                    <div class="panel-footer clearfix">
                                        <small class="pull-left">
                                            Created: @item.CreatedAt.ToString("MMM dd, yyyy")
                                            @(item.UpdatedAt != item.CreatedAt ? $" • Updated: {item.UpdatedAt:MMM dd}" : "")
                                        </small>
                                        <div class="btn-group btn-group-xs pull-right">
                                            <a href="@($"/site/pages/{item.Id}/edit")" class="btn btn-primary">
                                                <i class="fa fa-edit"></i>
                                            </a>
                                            <a href="@item.Pdf" class="btn btn-success" download>
                                                <i class="fa fa-download"></i>
                                            </a>
                                            <button class="btn btn-danger" @onclick="() => DeletePage(item.Id)">
                                                <i class="fa fa-trash"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="alert alert-warning text-center">
                        <i class="fa fa-file-text fa-2x"></i>
                        <h4>No pages found</h4>
                        <p>Try adjusting your filters or create a new page.</p>
                        <button class="btn btn-primary" @onclick="@(() => NavigationService.NavigateTo($"/site/pages/create"))">
                            <i class="fa fa-plus"></i> Create First Page
                        </button>
                    </div>
                }
            </div>
        </div>

        <!-- Pagination -->
        @if (_pageList.Count > 0)
        {
            <div class="text-center">
                <Pagination @ref="_pagination" UrlPagination="/site/pages/"
                            PagesBufferRange="@PagesBufferRange" CurrentPage="PageId"
                            CurrentPagesCount="_pagesCount" />
            </div>
        }
    </div>
</RenderPermission>

@code {
    [Parameter] public int PageId { get; set; }
    private string _searchTerm = string.Empty;
    
    private DateTime? _createdFrom;
    private DateTime? _createdTo;

    private async Task SetCreatedFrom(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out var date))
        {
            _createdFrom = date;
        }
        else
        {
            _createdFrom = null;
        }
        await FetchPages();
    }

    private async Task SetCreatedTo(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out var date))
        {
            _createdTo = date;
        }
        else
        {
            _createdTo = null;
        }
        await FetchPages();
    }

    private async Task ClearDateFilters()
    {
        _createdFrom = null;
        _createdTo = null;
        await FetchPages();
    }

    private IList<PageEntity> _pageList = new List<PageEntity>();
    private Pagination? _pagination;
    private DismissibleAlert? _alert;

    private const int ItemsPerPage = 9;
    private const int PagesBufferRange = 5;

    private long _pagesCount;
    private long _itemCount;

    protected override async Task OnParametersSetAsync()
    {
        PageId = PageId <= 0 ? 1 : PageId;
        _pagination?.SetCurrentPage(PageId);
        await FetchPages();
    }

    private async Task DeletePage(Guid pageId)
    {
        var result = await Mediator.Send(new DeleteCommand
            { Id = pageId, DeletedBy = AuthenticationState.User?.Id });

        switch (result.Result)
        {
            case 1:
                _alert?.ShowSuccess("Page deleted successfully.");
                var pageIndex = _pageList.ToList().FindIndex(c => c.Id == pageId);
                if (pageIndex >= 0) _pageList.RemoveAt(pageIndex);
                break;
            case -1:
                _alert?.ShowError("Failed to delete page.");
                break;
            default:
                _alert?.ShowError("An error occurred while deleting the page.");
                break;
        }
    }

    private async Task OnSearchInputChanged(ChangeEventArgs e)
    {
        _searchTerm = e.Value?.ToString() ?? string.Empty;
        PageId = 1;
        await FetchPages();
    }

    private async Task FetchPages()
    {
        if (AuthenticationState.User?.Id != null)
        {
            var result = await Mediator.Send(new GetPagedQuery
            {
                PageNumber = PageId,
                PageSize = ItemsPerPage,
                SearchTerm = _searchTerm,
                CreatedFrom = _createdFrom,
                CreatedTo = _createdTo
            });
        
            if (result.Items != null)
            {
                _pageList = result.Items;
                _itemCount = result.TotalCount;
            }
            _pagesCount = Convert.ToInt64(Math.Ceiling((double)_itemCount / ItemsPerPage));
            _pagination?.SetPagesCount(_pagesCount);
        }
    }

    private async Task ExportToCsv()
    {
        if (!_pageList.Any())
        {
            _alert?.ShowError("No data available to export.");
            return;
        }

        const string header = "Name,URL,Description,Created At,Created By,Updated At,Updated By";

        await CsvExporter.ExportListToCSV(_pageList, "Pages", header, Func);
        return;

        string Func(PageEntity data) => 
            $"{data.Name}," +
            $"{data.Url}," +
            $"{data.Description}," +
            $"{data.CreatedAt:yyyy-MM-dd HH:mm:ss}," +
            $"{data.CreatedByName}," +
            $"{data.UpdatedAt:yyyy-MM-dd HH:mm:ss}," +
            $"{data.UpdatedByName}";
    }
}