@page "/site/gallery/upload"

@using AWC.CQRS.Commands.Gallery
@using AWC.Infra.Entities.Site

@inject IAuthenticationStateService AuthenticationState
@inject INavigationService NavigationService
@inject IMediator Mediator
@inject IPermissionStylingService PermissionStyling
@inject IFileUploadService FileUploadService
@layout AuthorizedLayout
@rendermode InteractiveServer
<PageTitle>Upload Gallery Images</PageTitle>

<RenderPermission Permissions="new[] { UserPermissionsEnum.Administrator, UserPermissionsEnum.ContentManager }"
                  RedirectIfInvalid="true">

    <style>

        .upload-container {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 0px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(10px);
            overflow: hidden;
            margin: 20px auto;
            max-width: 1200px;
        }

        /* Header Section */
        .header-section {
            background: linear-gradient(135deg, #337ab7 0%, #23527c 100%);
            color: white;
            padding: 10px 0px;
            position: relative;
            overflow: hidden;
        }

        .header-icon {
            background: rgba(255, 255, 255, 0.15);
            width: 60px;
            height: 60px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 15px auto;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

            .header-icon i {
                font-size: 24px;
            }

        .header-title {
            font-size: 32px;
            font-weight: 600;
            margin: 0 0 5px 0;
            color: white;
        }

        .header-subtitle {
            font-size: 16px;
            font-weight: 300;
            margin: 0;
            opacity: 0.85;
        }

        .btn-back {
            background: linear-gradient(135deg, rgba(255, 255, 255, 0.2) 0%, rgba(255, 255, 255, 0.1) 100%) !important;
            border: 2px solid rgba(255, 255, 255, 0.3) !important;
            border-radius: 25px;
            padding: 10px 25px;
            font-weight: 500;
            color: white !important;
            transition: all 0.3s ease;
            margin-top: 20px;
        }

            .btn-back:hover {
                background: linear-gradient(135deg, rgba(255, 255, 255, 0.3) 0%, rgba(255, 255, 255, 0.2) 100%) !important;
                border-color: rgba(255, 255, 255, 0.5) !important;
                transform: translateY(-2px);
                color: white !important;
            }

        /* Upload Card */
        .upload-card {
            background: white;
            border-radius: 15px;
            margin: 20px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
            border: 1px solid rgba(51, 122, 183, 0.1);
            overflow: hidden;
        }

        .upload-section {
            padding: 30px;
        }

        .section-header {
            border-bottom: 3px solid rgba(51, 122, 183, 0.1);
            padding-bottom: 15px;
            margin-bottom: 25px;
            position: relative;
        }

            .section-header::before {
                content: '';
                position: absolute;
                bottom: -3px;
                left: 0;
                width: 60px;
                height: 3px;
                background: linear-gradient(135deg, #337ab7 0%, #5bc0de 100%);
                border-radius: 2px;
            }

            .section-header h3 {
                margin: 0;
                color: #337ab7;
                font-size: 24px;
                font-weight: 600;
                display: flex;
                align-items: center;
                gap: 12px;
            }

            .section-header i {
                background: rgba(51, 122, 183, 0.1);
                width: 40px;
                height: 40px;
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 18px;
            }

        /* Upload Zone */
        .upload-zone {
            border: 3px dashed rgba(51, 122, 183, 0.3);
            border-radius: 20px;
            padding: 60px 30px;
            text-align: center;
            background: linear-gradient(135deg, rgba(51, 122, 183, 0.02) 0%, rgba(51, 122, 183, 0.05) 100%);
            cursor: pointer;
            transition: all 0.4s ease;
            position: relative;
            overflow: hidden;
        }

            .upload-zone::before {
                content: '';
                position: absolute;
                top: 0;
                left: -100%;
                width: 100%;
                height: 100%;
                background: linear-gradient(90deg, transparent, rgba(51, 122, 183, 0.1), transparent);
                transition: left 0.5s ease;
            }

            .upload-zone:hover {
                border-color: #337ab7;
                background: linear-gradient(135deg, rgba(51, 122, 183, 0.08) 0%, rgba(51, 122, 183, 0.12) 100%);
                transform: translateY(-3px);
                box-shadow: 0 15px 35px rgba(51, 122, 183, 0.15);
            }

                .upload-zone:hover::before {
                    left: 100%;
                }

            .upload-zone .fa {
                font-size: 64px;
                color: #337ab7;
                margin-bottom: 20px;
                transition: all 0.3s ease;
            }

            .upload-zone:hover .fa {
                transform: scale(1.1);
                color: #286090;
            }

        .upload-instructions {
            margin: 15px 0 10px 0;
            color: #337ab7;
            font-size: 20px;
            font-weight: 600;
        }

        .upload-help {
            color: #666;
            font-size: 14px;
            margin-bottom: 15px;
        }

        .file-selected {
            background: linear-gradient(135deg, #d4edda 0%, #c3e6cb 100%);
            border: 2px solid #b8dabd;
            border-radius: 15px;
            padding: 15px 20px;
            margin-top: 20px;
            font-weight: 600;
            color: #155724;
            display: inline-block;
        }

            .file-selected i {
                margin-right: 8px;
                color: #28a745;
            }

        /* Preview Section */
        .preview-grid {
            margin-top: 25px;
        }

        .preview-item {
            background: white;
            border-radius: 15px;
            margin-bottom: 25px;
            overflow: hidden;
            position: relative;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
            border: 1px solid rgba(51, 122, 183, 0.1);
            transition: all 0.3s ease;
        }

            .preview-item:hover {
                box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
                transform: translateY(-5px);
            }

        .preview-image {
            width: 100%;
            height: 180px;
            object-fit: cover;
            transition: all 0.3s ease;
        }

        .preview-item:hover .preview-image {
            transform: scale(1.05);
        }

        .preview-content {
            padding: 20px;
        }

        .preview-title {
            border: 2px solid #e9ecef !important;
            border-radius: 10px !important;
            padding: 12px 15px;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.3s ease;
            margin-bottom: 10px;
        }

            .preview-title:focus {
                border-color: #337ab7 !important;
                box-shadow: 0 0 0 3px rgba(51, 122, 183, 0.1) !important;
                outline: none;
            }

        .preview-info {
            font-size: 13px;
            color: #666;
            font-weight: 500;
            background: rgba(51, 122, 183, 0.05);
            padding: 8px 12px;
            border-radius: 8px;
            display: inline-block;
        }

        .remove-btn {
            position: absolute;
            top: 15px;
            right: 15px;
            background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);
            color: white;
            border: none;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            font-size: 16px;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(220, 53, 69, 0.3);
        }

            .remove-btn:hover {
                background: linear-gradient(135deg, #c82333 0%, #bd2130 100%);
                transform: scale(1.1);
                box-shadow: 0 8px 25px rgba(220, 53, 69, 0.4);
            }

        /* Form Actions */
        .form-actions {
            padding: 30px;
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            border-top: 3px solid rgba(51, 122, 183, 0.1);
        }

        .btn-cancel {
            background: #6c757d !important;
            border: none !important;
            border-radius: 25px;
            padding: 12px 30px;
            color: white !important;
            font-weight: 500;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(108, 117, 125, 0.3);
        }

            .btn-cancel:hover {
                background: #5a6268 !important;
                transform: translateY(-2px);
                color: white !important;
                box-shadow: 0 8px 25px rgba(108, 117, 125, 0.4);
            }

        .btn-upload {
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%) !important;
            border: none !important;
            border-radius: 25px;
            padding: 12px 30px;
            color: white !important;
            font-weight: 600;
            font-size: 16px;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
            position: relative;
            overflow: hidden;
        }

            .btn-upload:hover:not(:disabled) {
                background: linear-gradient(135deg, #218838 0%, #1e7e34 100%) !important;
                transform: translateY(-2px);
                color: white !important;
                box-shadow: 0 8px 25px rgba(40, 167, 69, 0.4);
            }

            .btn-upload:disabled {
                background: #6c757d !important;
                cursor: not-allowed;
                transform: none;
                box-shadow: none;
            }

        .upload-spinner {
            display: inline-block;
            width: 16px;
            height: 16px;
            border: 2px solid transparent;
            border-top: 2px solid #fff;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-right: 8px;
        }

        /* Alert Styling */
        .alert {
            border-radius: 15px !important;
            border: none !important;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            font-weight: 500;
        }

        .alert-danger {
            background: linear-gradient(135deg, #f8d7da 0%, #f5c6cb 100%) !important;
            color: #721c24 !important;
        }

    
        /* Animation for preview items */
        .preview-item {
            animation: slideInUp 0.5s ease forwards;
            opacity: 0;
        }

     
        /* Stagger animation for multiple items */
        .preview-item:nth-child(1) {
            animation-delay: 0.1s;
        }

        .preview-item:nth-child(2) {
            animation-delay: 0.2s;
        }

        .preview-item:nth-child(3) {
            animation-delay: 0.3s;
        }

        .preview-item:nth-child(4) {
            animation-delay: 0.4s;
        }

        .preview-item:nth-child(5) {
            animation-delay: 0.5s;
        }

        .preview-item:nth-child(6) {
            animation-delay: 0.6s;
        }
    </style>

    <div class="upload-container">
        <!-- Header Section -->
        <div class="header-section text-center">
            <div class="header-icon">
                <i class="fa fa-cloud-upload"></i>
            </div>
            <div class="row">
                <div class="col-md-8 col-md-offset-2">
                    <h1 class="header-title">Upload Gallery Images</h1>
                    <p class="header-subtitle">Add beautiful images to your gallery collection</p>
                    <button class="btn btn-back"
                            @onclick="@(() => NavigationService.NavigateTo($"/site/gallery"))">
                        <i class="fa fa-arrow-left"></i> Back to Gallery
                    </button>
                </div>
            </div>
        </div>

        <!-- Upload Form -->
        <div class="upload-card">
            <EditForm Context="_" OnValidSubmit="@OnSubmitAsync" Model="_entity" FormName="GalleryUploadForm">
                <DataAnnotationsValidator />
                <ValidationSummary class="alert alert-danger" style="margin: 20px;" />

                <!-- File Selection Section -->
                <div class="upload-section">
                    <div class="section-header">
                        <h3>
                            <i class="fa fa-picture-o"></i>
                            Select Images
                        </h3>
                    </div>

                    <div class="upload-zone" onclick="document.getElementById('fileUpload').click();">
                        <InputFile OnChange="OnInputFileChange" multiple
                                   accept=".jpg,.jpeg,.png,.gif,.webp"
                                   class="hidden" id="fileUpload" style="display: none;" />

                        <div>
                            <i class="fa fa-cloud-upload"></i>
                        </div>
                        <div class="upload-instructions">
                            Click here to browse files or drag & drop images
                        </div>
                        <div class="upload-help">
                            Supported formats: JPG, PNG, GIF, WEBP (Max 5MB each)
                        </div>

                        @if (_uploadedFiles.Count > 0)
                        {
                            <div class="file-selected">
                                <i class="fa fa-check-circle"></i>
                                @_uploadedFiles.Count @(_uploadedFiles.Count == 1 ? "image" : "images") selected
                            </div>
                        }
                    </div>
                </div>

                <!-- Image Previews Section -->
                @if (_uploadedFiles.Count > 0)
                {
                    <div class="upload-section" style="border-top: 3px solid rgba(51, 122, 183, 0.1); margin-top: 0;">
                        <div class="section-header">
                            <h3>
                                <i class="fa fa-eye"></i>
                                Image Previews (@_uploadedFiles.Count)
                            </h3>
                        </div>

                        <div class="preview-grid">
                            <div class="row">
                                @foreach (var file in _uploadedFiles)
                                {
                                    <div class="col-lg-3 col-md-4 col-sm-6 col-xs-12">
                                        <div class="preview-item">
                                            <img src="@GetImagePreview(file)"
                                                 class="preview-image"
                                                 alt="@file.Name" />

                                            <button type="button" class="remove-btn"
                                                    @onclick="() => RemoveFile(file)"
                                                    title="Remove image">
                                                <i class="fa fa-times"></i>
                                            </button>

                                            <div class="preview-content">
                                                <input type="text" class="form-control preview-title"
                                                       placeholder="Enter image title"
                                                       @bind="@_fileNames[file.Name]" />
                                                <div class="preview-info">
                                                    <i class="fa fa-file-image-o"></i>
                                                    @file.Name (@(file.Size / 1024) KB)
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }

                <!-- Form Actions -->
                <div class="form-actions">
                    <div class="row">
                        <div class="col-md-6 col-sm-6">
                            <button type="button" class="btn btn-cancel"
                                    @onclick="@(() => NavigationService.NavigateTo($"/site/gallery"))">
                                <i class="fa fa-times"></i> Cancel
                            </button>
                        </div>
                        <div class="col-md-6 col-sm-6 text-right">
                            <button type="submit" disabled="@(_inAction || _uploadedFiles.Count == 0)"
                                    class="btn btn-upload">
                                @if (_inAction)
                                {
                                    <span class="upload-spinner"></span>
                                    <span>Uploading...</span>
                                }
                                else
                                {
                                    <i class="fa fa-upload"></i>
                                    <span>Upload @(_uploadedFiles.Count > 0 ? $"({_uploadedFiles.Count})" : "")</span>
                                }
                            </button>
                        </div>
                    </div>
                </div>
            </EditForm>

            <!-- Alert for status messages -->
            <div style="padding: 0 30px 30px 30px;">
                <DismissibleAlert @ref="_alert" />
            </div>
        </div>
    </div>

</RenderPermission>
@code {
    private List<IBrowserFile> _uploadedFiles = [];
    private Dictionary<string, string> _fileNames = new();
    private Dictionary<string, string> _imagePreviews = new();
    private DismissibleAlert? _alert;
    private bool _inAction;
    private GalleryEntity _entity = new();

    private string GetImagePreview(IBrowserFile file)
    {
        return _imagePreviews.TryGetValue(file.Name, out var preview) ? preview : string.Empty;
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        _uploadedFiles.Clear();
        _fileNames.Clear();
        _imagePreviews.Clear();

        foreach (var file in e.GetMultipleFiles())
        {
            // Validate file type
            var extension = Path.GetExtension(file.Name).ToLower();
            if (!new[] { ".jpg", ".jpeg", ".png", ".gif", ".webp" }.Contains(extension))
            {
                _alert?.ShowError($"Invalid file type: {file.Name}. Only images are allowed.");
                continue;
            }

            // Validate file size (5MB limit)
            if (file.Size > 5 * 1024 * 1024)
            {
                _alert?.ShowError($"File too large: {file.Name} (Max 5MB allowed)");
                continue;
            }

            _uploadedFiles.Add(file);
            _fileNames[file.Name] = Path.GetFileNameWithoutExtension(file.Name);

            var preview = await GeneratePreviewAsync(file);
            _imagePreviews[file.Name] = preview;
        }
    }

    private void RemoveFile(IBrowserFile file)
    {
        _uploadedFiles.Remove(file);
        _fileNames.Remove(file.Name);
        _imagePreviews.Remove(file.Name);
    }

    private async Task<string> GeneratePreviewAsync(IBrowserFile file)
    {
        try
        {
            var resizedImage = await file.RequestImageFileAsync(file.ContentType, 800, 800);
            using var memoryStream = new MemoryStream();
            await resizedImage.OpenReadStream().CopyToAsync(memoryStream);
            return $"data:{file.ContentType};base64,{Convert.ToBase64String(memoryStream.ToArray())}";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error generating preview: {ex.Message}");
            return string.Empty;
        }
    }

    private async Task OnSubmitAsync()
    {
        if (!_inAction && _uploadedFiles.Count > 0)
        {
            try
            {
                _inAction = true;
                var successCount = 0;
                var allowedExtensions = new[] { ".jpg", ".jpeg", ".png", ".gif", ".webp" };

                foreach (var file in _uploadedFiles)
                {
                    try
                    {
                        var uploadResult = await FileUploadService.UploadFileAsync(
                            file,
                            UploadPath.GalleryImages,
                            allowedExtensions);

                        if (!uploadResult.Success) continue;

                        var command = new UpsertCommand
                        {
                            Name = _fileNames.TryGetValue(file.Name, out var name) ? name : file.Name,
                            Image = uploadResult.FilePath,
                            CreatedBy = AuthenticationState.User?.Id
                        };

                        var result = await Mediator.Send(command);
                        if (result.Result == 1) successCount++;
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Error uploading {file.Name}: {ex.Message}");
                    }
                }

                _alert?.ShowAlert(
                    successCount > 0 ? "success" : "error",
                    successCount > 0
                        ? $"Successfully uploaded {successCount} of {_uploadedFiles.Count} images"
                        : "Failed to upload images"
                );

                if (successCount > 0)
                {
                    _uploadedFiles.Clear();
                    _fileNames.Clear();
                    _imagePreviews.Clear();
                }
            }
            catch (Exception ex)
            {
                _alert?.ShowError($"An error occurred: {ex.Message}");
            }
            finally
            {
                _inAction = false;
            }
        }
    }
}