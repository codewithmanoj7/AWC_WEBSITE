@page "/site/gallery"
@page "/site/gallery/{PageId:int}"

@using AWC.CQRS.Commands.Gallery
@using AWC.CQRS.Queries.Gallery
@using AWC.Infra.Entities.Site
@inject IAuthenticationStateService AuthenticationState
@inject INavigationService NavigationService
@inject IMediator Mediator
@inject IJSRuntime JsRuntime
@inject IPermissionStylingService PermissionStyling
@layout AuthorizedLayout
@rendermode InteractiveServer
<PageTitle>Gallery</PageTitle>

<RenderPermission Permissions="new[] { UserPermissionsEnum.Administrator, UserPermissionsEnum.ContentManager }"
                  RedirectIfInvalid="true">
    <div class="container gallery-management-container">
        
        <!-- Header Section -->
        <div class="page-header-wrapper">
            <div class="row">
                <div class="col-md-8">
                    <div class="page-title">
                        <div class="title-icon">
                            <i class="fa fa-picture-o fa-2x"></i>
                        </div>
                        <div class="title-content">
                            <h2 class="title-main">Gallery Management</h2>
                            <p class="title-subtitle">View, organize and manage your image collection</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-4 text-right">
                    <div class="header-actions">
                        <button class="btn btn-primary btn-upload" @onclick="@(() => NavigationService.NavigateTo($"/site/gallery/upload"))">
                            <i class="fa fa-cloud-upload"></i>
                            <span>Upload Images</span>
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Search & Filters Card -->
        <div class="search-filters-card">
            <div class="card-content">
                <div class="row">
                    <div class="col-md-8">
                        <div class="search-wrapper">
                            <div class="search-icon">
                                <i class="fa fa-search"></i>
                            </div>
                            <input type="text" class="form-control search-input"
                                   placeholder="Search events by name, location, or description..."
                                   @bind="_searchTerm" @oninput="OnSearchInputChanged" />
                        </div>
                    </div>

                    <div class="col-md-4 text-right">
                        <div class="dropdown filter-dropdown">
                            <button class="btn btn-default dropdown-toggle filter-btn"
                                    type="button" data-toggle="dropdown" aria-expanded="false">
                                <i class="fa fa-filter"></i> <span>Filters</span>
                                <span class="caret"></span>
                            </button>

                            <ul class="dropdown-menu dropdown-menu-right filter-menu">
                                <li class="filter-header">
                                    <i class="fa fa-calendar"></i>
                                    <span>Filter by Creation Date</span>
                                </li>
                                <li class="filter-item">
                                    <label class="filter-label">
                                        <i class="fa fa-calendar-plus-o"></i> Created From
                                    </label>
                                    <input type="date" class="form-control date-input"
                                           value="@(_uploadedFrom?.ToString("yyyy-MM-dd") ?? "")"
                                           @onchange="@(e => SetUploadedFrom(e))" />
                                </li>
                                <li class="filter-item">
                                    <label class="filter-label">
                                        <i class="fa fa-calendar-minus-o"></i> Created To
                                    </label>
                                    <input type="date" class="form-control date-input"
                                           value="@(_uploadedTo?.ToString("yyyy-MM-dd") ?? "")"
                                           @onchange="@(e => SetUploadedTo(e))" />
                                </li>
                                <li class="divider"></li>
                                <li class="filter-actions text-center">
                                    <button type="button" class="btn btn-danger btn-sm"
                                            @onclick="ClearDateFilters">
                                        <i class="fa fa-times-circle"></i> Clear Filters
                                    </button>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Results Summary -->
        @{
            var numFrom = (PageId - 1) * ItemsPerPage + 1;
            var numTo = (PageId * ItemsPerPage) > _itemCount ? _itemCount : (PageId * ItemsPerPage);
        }
        <div class="results-summary">
            <div class="summary-icon">
                <i class="fa fa-images"></i>
            </div>
            <div class="summary-text">
                Displaying <strong>@numFrom - @numTo</strong> of <strong>@_itemCount</strong> images
            </div>
        </div>

        <!-- Active Filters -->
        @if (_uploadedFrom.HasValue || _uploadedTo.HasValue)
        {
            <div class="active-filters">
                <div class="filter-icon">
                    <i class="fa fa-filter"></i>
                </div>
                <div class="filter-text">
                    Filtering images by upload date:
                    @(_uploadedFrom.HasValue ? $"from {_uploadedFrom.Value:yyyy-MM-dd}" : "")
                    @(_uploadedTo.HasValue ? $" to {_uploadedTo.Value:yyyy-MM-dd}" : "")
                </div>
                <button class="btn btn-sm btn-clear-filter" @onclick="ClearDateFilters">
                    <i class="fa fa-times"></i>
                    Clear
                </button>
            </div>
        }

        <!-- Alert Messages -->
        <div class="alert-section">
            <DismissibleAlert @ref="_alert" />
        </div>

        <!-- Gallery Grid -->
        @if (_galleryList.Count > 0)
        {
            <div class="gallery-grid">
                @foreach (var item in _galleryList)
                {
                    <div class="gallery-item-wrapper">
                        <div class="gallery-item">
                            <!-- Image Container -->
                            <div class="image-container">
                                <img src="@item.Image" class="gallery-image" alt="@item.Name" loading="lazy" />
                                
                                <!-- Image Overlay -->
                                <div class="image-overlay">
                                    <div class="overlay-content">
                                        <button class="overlay-btn view-btn" onclick="window.open('@item.Image', '_blank')">
                                            <i class="fa fa-search-plus"></i>
                                        </button>
                                        <button class="overlay-btn download-btn" onclick="downloadImage('@item.Image', '@item.Name')">
                                            <i class="fa fa-download"></i>
                                        </button>
                                    </div>
                                </div>

                                <!-- Actions Dropdown -->
                                <div class="gallery-actions" id="actions_@item.Id">
                                    <button class="actions-btn" onclick="toggleActions('@item.Id')">
                                        <i class="fa fa-ellipsis-v"></i>
                                    </button>
                                    <div class="actions-menu">
                                        <a href="@item.Image" target="_blank" class="action-link">
                                            <i class="fa fa-expand"></i>
                                            <span>View Full Size</span>
                                        </a>
                                        <a href="@item.Image" download class="action-link">
                                            <i class="fa fa-download"></i>
                                            <span>Download</span>
                                        </a>
                                        <div class="action-divider"></div>
                                        <a href="javascript:void(0)" class="action-link delete" @onclick="() => DeleteImage(item.Id)">
                                            <i class="fa fa-trash"></i>
                                            <span>Delete Image</span>
                                        </a>
                                    </div>
                                </div>
                            </div>

                            <!-- Image Info -->
                            <div class="image-info">
                                <h4 class="image-title">@item.Name</h4>
                                <div class="image-meta">
                                    <div class="meta-item">
                                        <i class="fa fa-calendar-o"></i>
                                        <span>@item.CreatedAt.ToString("MMM dd, yyyy")</span>
                                    </div>
                                    <div class="meta-item">
                                        <i class="fa fa-clock-o"></i>
                                        <span>@item.CreatedAt.ToString("HH:mm")</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="empty-state">
                <div class="empty-icon">
                    <i class="fa fa-picture-o"></i>
                </div>
                <h3 class="empty-title">No images found</h3>
                <p class="empty-subtitle">Upload your first image to start building your gallery</p>
                <button class="btn btn-primary btn-upload-first" @onclick="@(() => NavigationService.NavigateTo($"/site/gallery/upload"))">
                    <i class="fa fa-cloud-upload"></i>
                    <span>Upload First Image</span>
                </button>
            </div>
        }

        <!-- Pagination -->
        @if (_galleryList.Count > 0)
        {
            <div class="pagination-wrapper">
                <Pagination @ref="_pagination" UrlPagination="/site/gallery/"
                            PagesBufferRange="@PagesBufferRange" CurrentPage="PageId"
                            CurrentPagesCount="_pagesCount" />
            </div>
        }

        <!-- Backdrop for dropdowns -->
        <div class="dropdown-backdrop" onclick="closeAllDropdowns()" style="display: none;"></div>
    </div>

    <script>
        function toggleFilter() {
            var dropdown = document.getElementById('filterDropdown');
            var backdrop = document.querySelector('.dropdown-backdrop');
            var isOpen = dropdown.classList.contains('open');

            closeAllDropdowns();

            if (!isOpen) {
                dropdown.classList.add('open');
                backdrop.style.display = 'block';
            }
        }

        function toggleActions(itemId) {
            var dropdown = document.getElementById('actions_' + itemId);
            var backdrop = document.querySelector('.dropdown-backdrop');
            var isOpen = dropdown.classList.contains('open');

            closeAllDropdowns();

            if (!isOpen) {
                dropdown.classList.add('open');
                backdrop.style.display = 'block';
            }
        }

        function closeAllDropdowns() {
            var dropdowns = document.querySelectorAll('.filter-dropdown, .gallery-actions');
            var backdrop = document.querySelector('.dropdown-backdrop');
            
            dropdowns.forEach(function(dropdown) {
                dropdown.classList.remove('open');
            });
            
            if (backdrop) {
                backdrop.style.display = 'none';
            }
        }

        function downloadImage(url, filename) {
            var link = document.createElement('a');
            link.href = url;
            link.download = filename || 'image';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }

        // Close dropdowns when clicking outside
        document.addEventListener('click', function(e) {
            if (!e.target.closest('.filter-dropdown') && !e.target.closest('.gallery-actions')) {
                closeAllDropdowns();
            }
        });

        // Animate gallery items on load
        document.addEventListener('DOMContentLoaded', function() {
            const galleryItems = document.querySelectorAll('.gallery-item-wrapper');
            galleryItems.forEach((item, index) => {
                item.style.opacity = '0';
                item.style.transform = 'translateY(30px)';
                setTimeout(() => {
                    item.style.transition = 'all 0.6s ease';
                    item.style.opacity = '1';
                    item.style.transform = 'translateY(0)';
                }, index * 100);
            });
        });
    </script>
</RenderPermission>

<style>
    /* Container and Layout */
    .gallery-management-container {
        padding: 30px 15px;
        background: linear-gradient(135deg, #f8f9ff 0%, #e8f2ff 100%);
        min-height: 100vh;
    }


    /* Ensure dropdown isn't cut off by card or wrapper */
    .search-filters-card {
        position: relative;
        overflow: visible !important;
        z-index: 1;
    }

    .card-content {
        overflow: visible !important;
        position: relative;
    }

    /* Dropdown menu styling */
    .filter-dropdown {
        position: relative;
    }

    .filter-menu {
        z-index: 1050 !important;
        min-width: 280px;
        padding: 15px 20px;
        background: #fff;
        border-radius: 8px;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
    }

    .filter-header {
        font-weight: bold;
        color: #333;
        margin-bottom: 10px;
    }

    .filter-item {
        margin-bottom: 15px;
    }

    .filter-label {
        display: block;
        font-size: 13px;
        margin-bottom: 5px;
        color: #555;
    }


    /* Page Header */
    .page-header-wrapper {
        margin-bottom: 30px;
        padding: 0 15px;
    }

    .page-title {
        display: flex;
        align-items: center;
        gap: 20px;
    }

    .title-icon {
        background: linear-gradient(135deg, #007bff, #0056b3);
        color: white;
        width: 70px;
        height: 70px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: 0 4px 15px rgba(0, 123, 255, 0.3);
    }

    .title-content h2.title-main {
        margin: 0;
        color: #2c3e50;
        font-weight: 600;
        font-size: 28px;
    }

    .title-content .title-subtitle {
        margin: 5px 0 0 0;
        color: #6c757d;
        font-size: 16px;
    }

    /* Header Actions */
    .header-actions {
        display: flex;
        align-items: center;
    }

    .btn-upload {
        background: linear-gradient(135deg, #007bff, #0056b3);
        border: none;
        color: white;
        border-radius: 25px;
        padding: 12px 25px;
        font-weight: 600;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(0, 123, 255, 0.3);
    }

    .btn-upload:hover {
        background: linear-gradient(135deg, #0056b3, #004085);
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(0, 123, 255, 0.4);
        color: white;
    }

    .btn-upload span {
        margin-left: 8px;
    }

    /* Search & Filters Card */
    .search-filters-card {
        background: white;
        border-radius: 15px;
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
        margin-bottom: 25px;
        overflow: hidden;
    }

    .card-content {
        padding: 25px;
    }

    /* Search Input */
    .search-wrapper {
        position: relative;
    }

    .search-icon {
        position: absolute;
        left: 15px;
        top: 50%;
        transform: translateY(-50%);
        color: #007bff;
        z-index: 2;
    }

    .search-input {
        border: 2px solid #e9ecef;
        border-radius: 25px;
        padding: 12px 15px 12px 45px;
        font-size: 14px;
        transition: all 0.3s ease;
        background: #fdfdfd;
    }

    .search-input:focus {
        border-color: #007bff;
        box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);
        background: white;
        outline: none;
    }

    /* Filter Dropdown */
    .filter-btn {
        background: white;
        border: 2px solid #dee2e6;
        border-radius: 25px;
        padding: 12px 20px;
        font-weight: 500;
        color: #6c757d;
        transition: all 0.3s ease;
    }

    .filter-btn:hover {
        border-color: #007bff;
        color: #007bff;
        background: #f8f9ff;
    }

    .filter-btn span {
        margin: 0 5px;
    }

    .filter-dropdown {
        position: relative;
        display: inline-block;
    }

    .filter-content {
        display: none;
        position: absolute;
        right: 0;
        top: 100%;
        background: white;
        border-radius: 12px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
        padding: 20px;
        width: 280px;
        margin-top: 10px;
        z-index: 1000;
    }

    .filter-dropdown.open .filter-content {
        display: block;
        animation: fadeInDown 0.3s ease;
    }

    .filter-header {
        display: flex;
        align-items: center;
        gap: 10px;
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 15px;
        padding-bottom: 10px;
        border-bottom: 1px solid #e9ecef;
    }

    .filter-item {
        margin-bottom: 15px;
    }

    .filter-label {
        display: flex;
        align-items: center;
        gap: 8px;
        font-weight: 500;
        color: #495057;
        margin-bottom: 5px;
        font-size: 13px;
    }

    .date-input {
        border: 1px solid #dee2e6;
        border-radius: 6px;
        padding: 8px 12px;
        font-size: 13px;
        width: 100%;
    }

    .date-input:focus {
        border-color: #007bff;
        box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.1);
        outline: none;
    }

    .filter-divider {
        border-top: 1px solid #e9ecef;
        margin: 15px -20px;
    }

    .filter-actions {
        text-align: center;
    }

    .clear-filters-btn {
        background: #dc3545;
        border: none;
        color: white;
        border-radius: 15px;
        padding: 8px 15px;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .clear-filters-btn:hover {
        background: #c82333;
        transform: translateY(-1px);
    }

    /* Results Summary */
    .results-summary {
        background: linear-gradient(135deg, #e3f2fd, #bbdefb);
        border: 1px solid #90caf9;
        border-radius: 10px;
        padding: 15px 20px;
        margin-bottom: 20px;
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .summary-icon {
        color: #1976d2;
        font-size: 18px;
    }

    .summary-text {
        color: #1565c0;
        font-weight: 500;
    }

    /* Active Filters */
    .active-filters {
        background: linear-gradient(135deg, #fff3cd, #ffeaa7);
        border: 1px solid #ffc107;
        border-radius: 10px;
        padding: 15px 20px;
        margin-bottom: 20px;
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .filter-icon {
        color: #856404;
        font-size: 16px;
    }

    .filter-text {
        color: #856404;
        font-weight: 500;
        flex: 1;
    }

    .btn-clear-filter {
        background: #ffc107;
        border: none;
        color: #856404;
        border-radius: 15px;
        padding: 6px 12px;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .btn-clear-filter:hover {
        background: #e0a800;
        color: white;
    }

    /* Alert Section */
    .alert-section {
        margin-bottom: 20px;
    }

    /* Gallery Grid */
    .gallery-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 25px;
        margin-bottom: 40px;
    }

    .gallery-item-wrapper {
        animation: slideInUp 0.6s ease-out;
    }

    .gallery-item {
        background: white;
        border-radius: 15px;
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.08);
        overflow: hidden;
        transition: all 0.3s ease;
        position: relative;
    }

    .gallery-item:hover {
        transform: translateY(-8px);
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
    }

    /* Image Container */
    .image-container {
        position: relative;
        overflow: hidden;
        height: 220px;
        background: #f8f9fa;
    }

    .gallery-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: all 0.3s ease;
    }

    .gallery-item:hover .gallery-image {
        transform: scale(1.05);
    }

    /* Image Overlay */
    .image-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 123, 255, 0.8);
        display: flex;
        align-items: center;
        justify-content: center;
        opacity: 0;
        transition: all 0.3s ease;
    }

    .gallery-item:hover .image-overlay {
        opacity: 1;
    }

    .overlay-content {
        display: flex;
        gap: 15px;
    }

    .overlay-btn {
        background: rgba(255, 255, 255, 0.9);
        border: none;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        color: #007bff;
        font-size: 18px;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    }

    .overlay-btn:hover {
        background: white;
        transform: scale(1.1);
        box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);
    }

    .view-btn:hover {
        color: #28a745;
    }

    .download-btn:hover {
        color: #17a2b8;
    }

    /* Gallery Actions */
    .gallery-actions {
        position: absolute;
        top: 15px;
        right: 15px;
        z-index: 10;
    }

    .actions-btn {
        background: rgba(255, 255, 255, 0.9);
        border: none;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        color: #6c757d;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
    }

    .actions-btn:hover {
        background: white;
        color: #007bff;
        transform: scale(1.1);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
    }

    .actions-menu {
        display: none;
        position: absolute;
        right: 0;
        top: 100%;
        background: white;
        border-radius: 10px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
        min-width: 160px;
        margin-top: 8px;
        overflow: hidden;
        z-index: 1001;
    }

    .gallery-actions.open .actions-menu {
        display: block;
        animation: fadeInDown 0.3s ease;
    }

    .action-link {
        display: flex;
        align-items: center;
        gap: 10px;
        padding: 12px 15px;
        color: #495057;
        text-decoration: none;
        font-size: 13px;
        font-weight: 500;
        transition: all 0.2s ease;
        border-bottom: 1px solid #f1f3f4;
    }

    .action-link:last-child {
        border-bottom: none;
    }

    .action-link:hover {
        background: #f8f9fa;
        text-decoration: none;
        padding-left: 18px;
    }

    .action-link.delete {
        color: #dc3545;
    }

    .action-link.delete:hover {
        background: #fff5f5;
        color: #c82333;
    }

    .action-divider {
        border-top: 1px solid #e9ecef;
        margin: 5px 0;
    }

    /* Image Info */
    .image-info {
        padding: 20px;
    }

    .image-title {
        margin: 0 0 10px 0;
        font-size: 16px;
        font-weight: 600;
        color: #2c3e50;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .image-meta {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .meta-item {
        display: flex;
        align-items: center;
        gap: 6px;
        color: #6c757d;
        font-size: 12px;
    }

    .meta-item i {
        width: 12px;
        text-align: center;
    }

    /* Empty State */
    .empty-state {
        background: white;
        border-radius: 15px;
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.08);
        padding: 60px 40px;
        text-align: center;
        margin: 40px 0;
    }

    .empty-icon {
        color: #dee2e6;
        font-size: 80px;
        margin-bottom: 20px;
    }

    .empty-title {
        color: #495057;
        font-weight: 600;
        margin-bottom: 10px;
    }

    .empty-subtitle {
        color: #6c757d;
        margin-bottom: 30px;
        font-size: 16px;
    }

    .btn-upload-first {
        background: linear-gradient(135deg, #007bff, #0056b3);
        border: none;
        color: white;
        border-radius: 25px;
        padding: 15px 30px;
        font-weight: 600;
        font-size: 16px;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(0, 123, 255, 0.3);
    }

    .btn-upload-first:hover {
        background: linear-gradient(135deg, #0056b3, #004085);
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(0, 123, 255, 0.4);
        color: white;
    }

    .btn-upload-first span {
        margin-left: 8px;
    }

    /* Pagination */
    .pagination-wrapper {
        background: white;
        border-radius: 15px;
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.08);
        padding: 20px;
        text-align: center;
        margin-top: 40px;
    }

    /* Backdrop */
    .dropdown-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.1);
        z-index: 999;
    }

</style>
        
@code {
    [Parameter] public int PageId { get; set; } = 1;
    private string _searchTerm = string.Empty;
    
    private DateTime? _uploadedFrom;
    private DateTime? _uploadedTo;

    private async Task SetUploadedFrom(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out var date))
        {
            _uploadedFrom = date;
        }
        else
        {
            _uploadedFrom = null;
        }
        await FetchGalleryItems();
    }

    private async Task SetUploadedTo(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out var date))
        {
            _uploadedTo = date;
        }
        else
        {
            _uploadedTo = null;
        }
        await FetchGalleryItems();
    }

    private async Task ClearDateFilters()
    {
        _uploadedFrom = null;
        _uploadedTo = null;
        await FetchGalleryItems();
    }

    private IList<GalleryEntity> _galleryList = new List<GalleryEntity>();
    private Pagination? _pagination;
    private DismissibleAlert? _alert;

    private const int ItemsPerPage = 15;
    private const int PagesBufferRange = 5;

    private long _pagesCount;
    private long _itemCount;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            PageId = PageId <= 0 ? 1 : PageId;
            _pagination?.SetCurrentPage(PageId);
            await FetchGalleryItems();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error in OnParametersSetAsync: " + ex.Message);
        }
    }


    private async Task DeleteImage(Guid imageId)
    {
        var confirmed = await JsRuntime.InvokeAsync<bool>("confirm",
            ["Are you sure you want to delete this image?"]);
    
        if (!confirmed) return;

        var result = await Mediator.Send(new DeleteCommand
            { Id = imageId, DeletedBy = AuthenticationState.User?.Id });

        switch (result.Result)
        {
            case 1:
                _alert?.ShowSuccess("Image deleted successfully.");
                var imageIndex = _galleryList.ToList().FindIndex(c => c.Id == imageId);
                if (imageIndex >= 0) _galleryList.RemoveAt(imageIndex);
                break;
            case -1:
                _alert?.ShowError("Failed to delete image.");
                break;
            default:
                _alert?.ShowError("An error occurred while deleting the image.");
                break;
        }
    }

    private async Task OnSearchInputChanged(ChangeEventArgs e)
    {
        _searchTerm = e.Value?.ToString() ?? string.Empty;
        PageId = 1;
        await FetchGalleryItems();
    }

    private async Task FetchGalleryItems()
    {
        try
        {
            if (AuthenticationState.User?.Id == null)
            {
                Console.WriteLine("User not authenticated yet.");
                return;
            }

            var result = await Mediator.Send(new GetPagedQuery
            {
                PageNumber = PageId,
                PageSize = ItemsPerPage,
                SearchTerm = _searchTerm,
                CreatedFrom = _uploadedFrom,
                CreatedTo = _uploadedTo
            });

            if (result.Items != null)
            {
                _galleryList = result.Items;
                _itemCount = result.TotalCount;
            }

            _pagesCount = Convert.ToInt64(Math.Ceiling((double)_itemCount / ItemsPerPage));
            _pagination?.SetPagesCount(_pagesCount);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error in FetchGalleryItems: " + ex.Message);
        }
    }
}