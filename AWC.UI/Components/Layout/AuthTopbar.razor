@inject IAuthenticationStateService AuthenticationState
@inject IPermissionStylingService PermissionStyling

@rendermode InteractiveServer

<div class="topbar">
    <div class="topbar-left">
        <button class="mobile-menu-toggle" @onclick="ToggleSidebar" aria-label="Toggle menu">
            <i class="fa fa-bars"></i>
        </button>
        <img src="/assets/images/logo.png" alt="Army War College Logo" class="topbar-logo" />
        <span class="topbar-title">Army War College, Mhow</span>
    </div>
    <div class="user-action-box">
        <!-- Profile Dropdown -->
        <div class="dropdown">
            <button class="btn user-initials-circle dropdown-toggle" type="button" id="userDropdown" data-bs-toggle="dropdown" aria-expanded="false" aria-label="User menu">
                @((AuthenticationState.User?.FirstName?[0].ToString() ?? "") + (AuthenticationState.User?.LastName?[0].ToString() ?? ""))
            </button>
            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="userDropdown">
                <li><a class="dropdown-item" href="/profile"><i class="fa fa-user"></i>&nbsp; My Profile</a></li>
                <li><hr class="dropdown-divider" /></li>

                <NavLink role="button"
                         class="nav-link btn btn-danger d-flex justify-content-center align-items-center gap-2 py-2 px-3 mt-1 shadow-sm w-100" style="margin-left:30px;"
                         title="Logout"
                         @onclick=@(() => _logout = true)>

                    @if (_logout)
                    {
                        <Logout />
                    }

                    <i class="fa fa-sign-out fa-lg"></i>
                    <span class="fw-semibold">Logout</span>
                </NavLink>

            </ul>
        </div>
        <!-- Role Badge -->
        @if (AuthenticationState.User?.Permissions != null)
        {
            <span class="badge role-badge @PermissionStyling.GetBootstrapClassesForPermission(AuthenticationState.User.Permissions)">
                @PermissionStyling.GetDisplayTextForPermission(AuthenticationState.User.Permissions)
            </span>
        }
    </div>
</div>

<style>
    .topbar {
        background-color: #c40000;
        color: white;
        padding: 15px 20px;
        font-size: 1.1rem;
        font-weight: 600;
        height: 70px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        z-index: 1000;
    }


    .logout-btn {
        color: #dc3545 !important;
        border-top: 1px solid #eee;
        margin-top: 0.5rem;
    }

        .logout-btn:hover {
            background: #f8d7da !important;
            color: #721c24 !important;
        }



    .topbar-left {
        display: flex;
        align-items: center;
        gap: 15px;
        flex: 1;
        min-width: 0; /* Allow text truncation */
    }

    .mobile-menu-toggle {
        display: none;
        background: none;
        border: none;
        color: white;
        font-size: 1.5rem;
        cursor: pointer;
        padding: 5px;
        flex-shrink: 0;
    }

    .topbar-logo {
        height: 75px;
        margin-right: -15px;
        flex-shrink: 0;
    }

    .topbar-title {
        color: white;
        font-size: 2rem;
        font-weight: 600;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        min-width: 0;
    }

    .user-info {
        background-color: rgba(255, 255, 255, 0.1);
        border-radius: 30px;
        padding: 5px 12px;
        font-size: 14px;
    }

    .topbar .btn-outline-light {
        color: #fff;
        border-color: #fff;
        transition: all 0.2s ease;
        font-size: 14px;
    }

        .topbar .btn-outline-light:hover {
            background-color: #fff;
            color: #c40000;
        }

    .fa-sign-out {
        font-size: 16px;
    }

</style>
@code {
    private bool _logout;

    private bool isSidebarOpen = false;

    private void ToggleSidebar()
    {
        isSidebarOpen = !isSidebarOpen;
    }

    private void CloseSidebar()
    {
        isSidebarOpen = false;
    }

    private async Task HandleLogout()
    {
        await JSRuntime.DeleteCookie("AccessCookie");
        NavManager.NavigateTo("/auth/login", forceLoad: true);
    }

    [Inject] public IJSRuntime JSRuntime { get; set; }
    [Inject] public NavigationManager NavManager { get; set; }

    protected override void OnInitialized()
    {
        // Close sidebar when navigating to new pages on mobile
        NavManager.LocationChanged += (sender, e) =>
        {
            if (isSidebarOpen)
            {
                isSidebarOpen = false;
                StateHasChanged();
            }
        };
    }

    public void Dispose()
    {
        NavManager.LocationChanged -= (sender, e) =>
        {
            if (isSidebarOpen)
            {
                isSidebarOpen = false;
                StateHasChanged();
            }
        };
    }
}
