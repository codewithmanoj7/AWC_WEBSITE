@inherits LayoutComponentBase
@inject IAuthenticationStateService AuthenticationState
@inject IPermissionStylingService PermissionStyling
<PageTitle>Army War College, Mhow</PageTitle>
<!-- FontAwesome 4 CDN -->
<style>
    body {
        margin: 0;
        background-color: #f4f6f9;
    }

  
    .layout-container {
        display: flex;
        height: 100vh;
        padding-top: 70px;
        position: relative;
    }

    .sidebar {
        width: 240px;
        background-color: #ffffff;
        border-right: 1px solid #ddd;
        padding: 25px 15px;
        transition: transform 0.3s ease-in-out;
        z-index: 999;
        position: fixed;
        top: 70px;
        left: 0;
        height: calc(100vh - 70px);
        overflow-y: auto;
    }

        .sidebar a {
            color: #333;
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 12px 15px;
            margin-bottom: 10px;
            text-decoration: none;
            border-radius: 5px;
            font-size: 15px;
            transition: background 0.2s ease-in-out;
            white-space: nowrap;
        }

            .sidebar a:hover {
                background-color: #e8f0fe;
                color: #007bff;
            }

    .main-content {
        flex: 1;
        margin-left: 240px;
        padding: 0px;
        background-color: #f4f6f9;
        overflow-y: auto;
        transition: margin-left 0.3s ease-in-out;
        min-height: calc(100vh - 70px);
    }

    .content {
        background-color: #fff;
        padding: 25px;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);
        min-height: calc(100vh - 150px);
    }
    /* Icon size consistency */
    .sidebar i {
        width: 20px;
        text-align: center;
        flex-shrink: 0;
    }

    .user-action-box {
        background-color: rgba(255, 255, 255, 0.1);
        border-radius: 30px;
        font-size: 14px;
        color: #fff;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 15px;
        flex-shrink: 0;
    }

    .user-initials-circle {
        width: 40px;
        height: 40px;
        background-color: #ffffff;
        color: #c40000;
        font-weight: 600;
        font-size: 16px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        text-transform: uppercase;
        border: none;
        flex-shrink: 0;
    }

        .user-initials-circle:focus {
            box-shadow: none;
        }

    .role-badge {
        background-color: #ffffff !important;
        color: #333 !important;
        border-radius: 20px;
        font-weight: 500;
        padding: 4px 12px;
        font-size: 13px;
        flex-shrink: 0;
    }

    .dropdown-menu {
        min-width: 160px;
        font-size: 14px;
    }

    .logout-button {
        color: #dc3545;
        font-weight: 500;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        gap: 6px;
        text-align: center;
        width: auto;
    }

    .sidebar-overlay {
        display: none;
        position: fixed;
        top: 70px;
        left: 0;
        width: 100%;
        height: calc(100vh - 70px);
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 998;
        opacity: 0;
        transition: opacity 0.3s ease-in-out;
    }

        .sidebar-overlay.show {
            display: block;
            opacity: 1;
        }

</style>

<AuthorizeView>
    <Authorized>

        <AuthTopbar />
        <!-- Sidebar Overlay for mobile -->
        <div class="sidebar-overlay @(isSidebarOpen ? "show" : "")" @onclick="CloseSidebar"></div>

        <div class="layout-container">
            <nav class="sidebar @PermissionStyling.GetBootstrapClassesForPermission(AuthenticationState.User.Permissions) @(isSidebarOpen ? "open" : "")" role="navigation" aria-label="Main navigation">
                <a href="/home" @onclick="CloseSidebar">
                    <i class="fa fa-dashboard" aria-hidden="true"></i> Dashboard
                </a>
                <a href="/manage/users" @onclick="CloseSidebar">
                    <i class="fa fa-users" aria-hidden="true"></i> Users
                </a>
                <a href="/site/media" @onclick="CloseSidebar">
                    <i class="fa fa-photo" aria-hidden="true"></i> College Media
                </a>
                <a href="/site/events" @onclick="CloseSidebar">
                    <i class="fa fa-calendar-check-o" aria-hidden="true"></i> College Events
                </a>
                <a href="/site/news" @onclick="CloseSidebar">
                    <i class="fa fa-newspaper-o" aria-hidden="true"></i> College News
                </a>
                <a href="/site/notification" @onclick="CloseSidebar">
                    <i class="fa fa-bullhorn" aria-hidden="true"></i> Site Notifications
                </a>
                <a href="/site/gallery" @onclick="CloseSidebar">
                    <i class="fa fa-picture-o" aria-hidden="true"></i> Gallery
                </a>
                <a href="/site/pages" @onclick="CloseSidebar">
                    <i class="fa fa-picture-o" aria-hidden="true"></i> Pages
                </a>
            </nav>

            <main class="main-content">
                <article class="content">
                    @Body
                </article>
            </main>
        </div>
    </Authorized>
    <NotAuthorized>
        <NotAuthorizedPage />
    </NotAuthorized>
</AuthorizeView>

@code {
    private bool isSidebarOpen = false;

    private void ToggleSidebar()
    {
        isSidebarOpen = !isSidebarOpen;
    }

    private void CloseSidebar()
    {
        isSidebarOpen = false;
    }

    private async Task HandleLogout()
    {
        await JSRuntime.DeleteCookie("AccessCookie");
        NavManager.NavigateTo("/auth/login", forceLoad: true);
    }

    [Inject] public IJSRuntime JSRuntime { get; set; }
    [Inject] public NavigationManager NavManager { get; set; }

    protected override void OnInitialized()
    {
        // Close sidebar when navigating to new pages on mobile
        NavManager.LocationChanged += (sender, e) =>
        {
            if (isSidebarOpen)
            {
                isSidebarOpen = false;
                StateHasChanged();
            }
        };
    }

    public void Dispose()
    {
        NavManager.LocationChanged -= (sender, e) =>
        {
            if (isSidebarOpen)
            {
                isSidebarOpen = false;
                StateHasChanged();
            }
        };
    }
}



